{
  "total": 100,
  "p": 1,
  "ps": 100,
  "rules": [
    {
      "key": "squid:S1659",
      "repo": "squid",
      "name": "Multiple variables should not be declared on the same line",
      "createdAt": "2015-07-08T12:40:14+0200",
      "htmlDesc": "<p>Declaring multiple variable on one line is difficult to read.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass {\n\n  private int a, b;\n\n  public void method(){\n    int c; int d;\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n\n  private int a;\n  private int b;\n\n  public void method(){\n    int c;\n    int d;\n  }\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> MISRA C++:2008, 8-0-1 - An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/7wHEAw\">CERT, DCL52-J.</a> - Do not declare more than one variable per declaration\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/VgU\">CERT, DCL04-C.</a> - Do not declare more than one variable per declaration\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/fAAhAQ\">CERT, DCL04-CPP.</a> - Do not declare more than one variable per declaration\n</li></ul>",
      "mdDesc": "<p>Declaring multiple variable on one line is difficult to read.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass {\n\n  private int a, b;\n\n  public void method(){\n    int c; int d;\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n\n  private int a;\n  private int b;\n\n  public void method(){\n    int c;\n    int d;\n  }\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> MISRA C++:2008, 8-0-1 - An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/7wHEAw\">CERT, DCL52-J.</a> - Do not declare more than one variable per declaration\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/VgU\">CERT, DCL04-C.</a> - Do not declare more than one variable per declaration\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/fAAhAQ\">CERT, DCL04-CPP.</a> - Do not declare more than one variable per declaration\n</li></ul>",
      "severity": "MINOR",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "cert",
        "convention",
        "misra"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "2min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "2min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "2min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "2min",
      "remFnOverloaded": false,
      "type": "CODE_SMELL"
    },
    {
      "key": "squid:S2060",
      "repo": "squid",
      "name": "\"Externalizable\" classes should have no-arguments constructors",
      "createdAt": "2016-03-30T18:19:38+0200",
      "htmlDesc": "<p>An <code>Externalizable</code> class is one which handles its own <code>Serialization</code> and deserialization. During deserialization, the first step in the process is a default instantiation using the class' no-argument constructor. Therefore an <code>Externalizable</code> class without a no-arg constructor cannot be deserialized.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Tomato implements Externalizable {  // Noncompliant; no no-arg constructor\n\n  public Tomato (String color, int weight) { ... }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Tomato implements Externalizable {\n\n  public Tomato() { ... }\n  public Tomato (String color, int weight) { ... }\n}\n</pre>",
      "mdDesc": "<p>An <code>Externalizable</code> class is one which handles its own <code>Serialization</code> and deserialization. During deserialization, the first step in the process is a default instantiation using the class' no-argument constructor. Therefore an <code>Externalizable</code> class without a no-arg constructor cannot be deserialized.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Tomato implements Externalizable {  // Noncompliant; no no-arg constructor\n\n  public Tomato (String color, int weight) { ... }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Tomato implements Externalizable {\n\n  public Tomato() { ... }\n  public Tomato (String color, int weight) { ... }\n}\n</pre>",
      "severity": "CRITICAL",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "20min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "20min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "20min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "20min",
      "remFnOverloaded": false,
      "type": "BUG"
    },
    {
      "key": "squid:S3020",
      "repo": "squid",
      "name": "\"toArray\" should be passed an array of the proper type",
      "createdAt": "2016-05-18T15:09:33+0200",
      "htmlDesc": "<p>Given no arguments, the <code>Collections.toArray</code> method returns an <code>Object []</code>, which will cause a <code>ClassCastException</code> at runtime if you try to cast it to an array of the proper class. Instead, pass an array of the correct type in to the call.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic String [] getStringArray(List&lt;String&gt; strings) {\n  return (String []) strings.toArray();  // Noncompliant; ClassCastException thrown\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic String [] getStringArray(List&lt;String&gt; strings) {\n  return (String []) strings.toArray(new String[0]);\n}\n</pre>",
      "mdDesc": "<p>Given no arguments, the <code>Collections.toArray</code> method returns an <code>Object []</code>, which will cause a <code>ClassCastException</code> at runtime if you try to cast it to an array of the proper class. Instead, pass an array of the correct type in to the call.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic String [] getStringArray(List&lt;String&gt; strings) {\n  return (String []) strings.toArray();  // Noncompliant; ClassCastException thrown\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic String [] getStringArray(List&lt;String&gt; strings) {\n  return (String []) strings.toArray(new String[0]);\n}\n</pre>",
      "severity": "CRITICAL",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "5min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "5min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "5min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "5min",
      "remFnOverloaded": false,
      "type": "BUG"
    },
    {
      "key": "squid:S2886",
      "repo": "squid",
      "name": "Getters and setters should be synchronized in pairs",
      "createdAt": "2016-05-18T15:09:33+0200",
      "htmlDesc": "<p>When one part of a getter/setter pair is <code>synchronized</code> the other part should be too. Failure to synchronize both sides of a pair may result in inconsistent behavior at runtime as callers access an inconsistent method state.</p>\n<p>This rule raises an issue when either the method of the contents of one method in a getter/setter pair are synchrnoized but the other is not.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Person {\n  String name;\n  int age; \n\n  public synchronized void setName(String name) {\n    this.name = name;\n  }\n\n  public String getName() {  // Noncompliant\n    return this.name;\n  }\n\n  public void setAge(int age) {  // Noncompliant\n    this.age = age;\n  }\n\n  public int getAge() {\n    synchronized (this) {\n      return this.age;\n    }\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Person {\n  String name;\n  int age; \n\n  public synchronized void setName(String name) {\n    this.name = name;\n  }\n\n  public synchronized String getName() {\n    return this.name;\n  }\n\n  public void setAge(int age) {\n    synchronized (this) {\n      this.age = age;\n   }\n  }\n\n  public int getAge() {\n    synchronized (this) {\n      return this.age;\n    }\n  }\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"https://www.securecoding.cert.org/confluence/x/I4BoAg\">CERT, VNA01-J.</a> - Ensure visibility of shared references to immutable objects\n</li></ul>",
      "mdDesc": "<p>When one part of a getter/setter pair is <code>synchronized</code> the other part should be too. Failure to synchronize both sides of a pair may result in inconsistent behavior at runtime as callers access an inconsistent method state.</p>\n<p>This rule raises an issue when either the method of the contents of one method in a getter/setter pair are synchrnoized but the other is not.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Person {\n  String name;\n  int age; \n\n  public synchronized void setName(String name) {\n    this.name = name;\n  }\n\n  public String getName() {  // Noncompliant\n    return this.name;\n  }\n\n  public void setAge(int age) {  // Noncompliant\n    this.age = age;\n  }\n\n  public int getAge() {\n    synchronized (this) {\n      return this.age;\n    }\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Person {\n  String name;\n  int age; \n\n  public synchronized void setName(String name) {\n    this.name = name;\n  }\n\n  public synchronized String getName() {\n    return this.name;\n  }\n\n  public void setAge(int age) {\n    synchronized (this) {\n      this.age = age;\n   }\n  }\n\n  public int getAge() {\n    synchronized (this) {\n      return this.age;\n    }\n  }\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"https://www.securecoding.cert.org/confluence/x/I4BoAg\">CERT, VNA01-J.</a> - Ensure visibility of shared references to immutable objects\n</li></ul>",
      "severity": "CRITICAL",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "cert",
        "multi-threading"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "5min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "5min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "5min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "5min",
      "remFnOverloaded": false,
      "type": "BUG"
    },
    {
      "key": "squid:S899",
      "repo": "squid",
      "name": "Return values should not be ignored when they contain the operation status code",
      "createdAt": "2016-05-18T15:09:33+0200",
      "htmlDesc": "<p>When the return value of a function call contain the operation status code, this value should be tested to make sure the operation completed successfully.</p>\n<p>This rule raises an issue when the return values of <code>java.io.File.delete()</code> or <code>java.util.concurrent.locks.Lock.tryLock()</code> are ignored.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething(File file, Lock lock) {\n  file.delete();  // Noncompliant\n  // ...\n  lock.tryLock(); // Noncompliant\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(File file, Lock lock) {\n  if (!lock.tryLock()) {\n    // lock failed; take appropriate action\n  }\n  if (!file.delete()) {\n    // file delete failed; take appropriate action\n  }\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> MISRA C:2004, 16.10 - If a function returns error information, then that error information shall be tested \n</li><li> MISRA C++:2008, 0-1-7 - The value returned by a function having a non-void return type that is not an overloaded operator shall always be used. \n</li><li> MISRA C:2012, Dir. 4.7 - If a function returns error information, then that error information shall be tested \n</li><li> MISRA C:2012, 17.7 - The value returned by a function having non-void return type shall be used \n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/w4C4Ag\">CERT, ERR33-C.</a> - Detect and handle standard library errors\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/iIBfBw\">CERT, POS54-C.</a> - Detect and handle POSIX library errors\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/9gEqAQ\">CERT, EXP00-J.</a> - Do not ignore values returned by methods\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/9YIRAQ\">CERT, EXP12-C.</a> - Do not ignore values returned by functions\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/eoAyAQ\">CERT, EXP12-CPP.</a> - Do not ignore values returned by functions or methods\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/toHWAw\">CERT, FIO02-J.</a> - Detect and handle file-related errors\n</li><li> <a href=\"http://cwe.mitre.org/data/definitions/754\">MITRE, CWE-754</a> - Improper Check for Unusual Exceptional Conditions\n</li></ul>",
      "mdDesc": "<p>When the return value of a function call contain the operation status code, this value should be tested to make sure the operation completed successfully.</p>\n<p>This rule raises an issue when the return values of <code>java.io.File.delete()</code> or <code>java.util.concurrent.locks.Lock.tryLock()</code> are ignored.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething(File file, Lock lock) {\n  file.delete();  // Noncompliant\n  // ...\n  lock.tryLock(); // Noncompliant\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(File file, Lock lock) {\n  if (!lock.tryLock()) {\n    // lock failed; take appropriate action\n  }\n  if (!file.delete()) {\n    // file delete failed; take appropriate action\n  }\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> MISRA C:2004, 16.10 - If a function returns error information, then that error information shall be tested \n</li><li> MISRA C++:2008, 0-1-7 - The value returned by a function having a non-void return type that is not an overloaded operator shall always be used. \n</li><li> MISRA C:2012, Dir. 4.7 - If a function returns error information, then that error information shall be tested \n</li><li> MISRA C:2012, 17.7 - The value returned by a function having non-void return type shall be used \n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/w4C4Ag\">CERT, ERR33-C.</a> - Detect and handle standard library errors\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/iIBfBw\">CERT, POS54-C.</a> - Detect and handle POSIX library errors\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/9gEqAQ\">CERT, EXP00-J.</a> - Do not ignore values returned by methods\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/9YIRAQ\">CERT, EXP12-C.</a> - Do not ignore values returned by functions\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/eoAyAQ\">CERT, EXP12-CPP.</a> - Do not ignore values returned by functions or methods\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/toHWAw\">CERT, FIO02-J.</a> - Detect and handle file-related errors\n</li><li> <a href=\"http://cwe.mitre.org/data/definitions/754\">MITRE, CWE-754</a> - Improper Check for Unusual Exceptional Conditions\n</li></ul>",
      "severity": "CRITICAL",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "cert",
        "cwe",
        "error-handling",
        "misra"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "15min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "15min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "15min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "15min",
      "remFnOverloaded": false,
      "type": "VULNERABILITY"
    },
    {
      "key": "squid:S2225",
      "repo": "squid",
      "name": "\"toString()\" and \"clone()\" methods should not return null",
      "createdAt": "2015-01-05T09:08:32+0100",
      "htmlDesc": "<p>Calling <code>toString()</code> or <code>clone()</code> on an object should always return a string or an object. Returning <code>null</code> instead contravenes the method's implicit contract.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic override string ToString () {\n  if (this.collection.Count == 0) {\n    return null; // Noncompliant\n  } else {\n    // ...\n </pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic override string ToString () {\n  if (this.collection.Count == 0) {\n    return \"\";\n  } else {\n    // ...\n </pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/476.html\">MITRE CWE-476</a> - NULL Pointer Dereference\n</li></ul>",
      "mdDesc": "<p>Calling <code>toString()</code> or <code>clone()</code> on an object should always return a string or an object. Returning <code>null</code> instead contravenes the method's implicit contract.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic override string ToString () {\n  if (this.collection.Count == 0) {\n    return null; // Noncompliant\n  } else {\n    // ...\n </pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic override string ToString () {\n  if (this.collection.Count == 0) {\n    return \"\";\n  } else {\n    // ...\n </pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/476.html\">MITRE CWE-476</a> - NULL Pointer Dereference\n</li></ul>",
      "severity": "CRITICAL",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "cwe"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "5min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "5min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "5min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "5min",
      "remFnOverloaded": false,
      "type": "BUG"
    },
    {
      "key": "squid:S00115",
      "repo": "squid",
      "name": "Constant names should comply with a naming convention",
      "createdAt": "2013-06-19T09:21:15+0200",
      "htmlDesc": "<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all constant names match a provided regular expression.</p>\n\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$</code>:</p>\n<pre>\npublic class MyClass {\n  public static final int first = 1;\n}\n\npublic enum MyEnum {\n  first;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  public static final int FIRST = 1; \n}\n\npublic enum MyEnum {\n  FIRST;\n}\n</pre>",
      "mdDesc": "<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all constant names match a provided regular expression.</p>\n\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$</code>:</p>\n<pre>\npublic class MyClass {\n  public static final int first = 1;\n}\n\npublic enum MyEnum {\n  first;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  public static final int FIRST = 1; \n}\n\npublic enum MyEnum {\n  FIRST;\n}\n</pre>",
      "severity": "MINOR",
      "status": "READY",
      "internalKey": "S115",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "convention"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [
        {
          "key": "format",
          "htmlDesc": "Regular expression used to check the constant names against.",
          "defaultValue": "^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$",
          "type": "STRING"
        }
      ],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "2min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "2min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "2min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "2min",
      "remFnOverloaded": false,
      "type": "CODE_SMELL"
    },
    {
      "key": "squid:S2226",
      "repo": "squid",
      "name": "Servlets should not have mutable instance fields",
      "createdAt": "2015-01-05T09:08:32+0100",
      "htmlDesc": "<p>By contract, a servlet container creates one instance of each servlet and then a dedicated thread is attached to each new incoming HTTP request to process this request. So all threads are sharing the servlet instances and by extension instance fields.  To prevent any misunderstanding and unexpected behavior at runtime, all servlet fields should then be either <code>static</code> and/or <code>final</code>, or simply removed.</p>\n<p>With Struts 1.X, the same constraint exists on <code>org.apache.struts.action.Action</code>.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyServlet extends HttpServlet {\n  private String userName;  //As this field is shared by all users, it's obvious that this piece of information should be managed differently\n  ...\n}\n</pre>\n<p>or </p>\n<pre>\npublic class MyAction extends Action {\n  private String userName;  //Same reason\n  ...\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"https://www.securecoding.cert.org/confluence/x/EYBUC\">CERT, MSC11-J.</a> - Do not let session information leak within a servlet\n</li></ul>",
      "mdDesc": "<p>By contract, a servlet container creates one instance of each servlet and then a dedicated thread is attached to each new incoming HTTP request to process this request. So all threads are sharing the servlet instances and by extension instance fields.  To prevent any misunderstanding and unexpected behavior at runtime, all servlet fields should then be either <code>static</code> and/or <code>final</code>, or simply removed.</p>\n<p>With Struts 1.X, the same constraint exists on <code>org.apache.struts.action.Action</code>.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyServlet extends HttpServlet {\n  private String userName;  //As this field is shared by all users, it's obvious that this piece of information should be managed differently\n  ...\n}\n</pre>\n<p>or </p>\n<pre>\npublic class MyAction extends Action {\n  private String userName;  //Same reason\n  ...\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"https://www.securecoding.cert.org/confluence/x/EYBUC\">CERT, MSC11-J.</a> - Do not let session information leak within a servlet\n</li></ul>",
      "severity": "CRITICAL",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "cert",
        "multi-threading",
        "struts"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "30min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "30min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "30min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "30min",
      "remFnOverloaded": false,
      "type": "BUG"
    },
    {
      "key": "squid:S00116",
      "repo": "squid",
      "name": "Field names should comply with a naming convention",
      "createdAt": "2013-06-19T09:21:15+0200",
      "htmlDesc": "<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that field names match a provided regular expression.</p>\n\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>\n<pre>\nclass MyClass {\n   private int my_field;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n   private int myField;\n}\n</pre>",
      "mdDesc": "<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that field names match a provided regular expression.</p>\n\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>\n<pre>\nclass MyClass {\n   private int my_field;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n   private int myField;\n}\n</pre>",
      "severity": "MINOR",
      "status": "READY",
      "internalKey": "S116",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "convention"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [
        {
          "key": "format",
          "htmlDesc": "Regular expression used to check the field names against.",
          "defaultValue": "^[a-z][a-zA-Z0-9]*$",
          "type": "STRING"
        }
      ],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "2min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "2min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "2min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "2min",
      "remFnOverloaded": false,
      "type": "CODE_SMELL"
    },
    {
      "key": "squid:S1135",
      "repo": "squid",
      "name": "\"TODO\" tags should be handled",
      "createdAt": "2013-08-30T17:20:57+0200",
      "htmlDesc": "<p><code>TODO</code> tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.</p>\n<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>\n<p>This rule is meant to track those tags, and ensure that they do not go unnoticed.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid doSomething() {\n  // TODO\n}\n</pre>",
      "mdDesc": "<p><code>TODO</code> tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.</p>\n<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>\n<p>This rule is meant to track those tags, and ensure that they do not go unnoticed.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid doSomething() {\n  // TODO\n}\n</pre>",
      "severity": "INFO",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "debtOverloaded": false,
      "remFnOverloaded": false,
      "type": "CODE_SMELL"
    },
    {
      "key": "squid:S1134",
      "repo": "squid",
      "name": "\"FIXME\" tags should be handled",
      "createdAt": "2013-08-30T17:20:57+0200",
      "htmlDesc": "<p><code>FIXME</code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.</p>\n<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>\n<p>This rule is meant to track those tags, and ensure that they do not go unnoticed.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nint divide(int numerator, int denominator) {\n  return numerator / denominator;              // FIXME denominator value might be  0\n}\n</pre>",
      "mdDesc": "<p><code>FIXME</code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.</p>\n<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>\n<p>This rule is meant to track those tags, and ensure that they do not go unnoticed.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nint divide(int numerator, int denominator) {\n  return numerator / denominator;              // FIXME denominator value might be  0\n}\n</pre>",
      "severity": "MAJOR",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "debtOverloaded": false,
      "remFnOverloaded": false,
      "type": "CODE_SMELL"
    },
    {
      "key": "squid:S00114",
      "repo": "squid",
      "name": "Interface names should comply with a naming convention",
      "createdAt": "2013-06-19T09:21:15+0200",
      "htmlDesc": "<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all interface names match a provided regular expression.</p>\n\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>:</p>\n<pre>\npublic interface myInterface {...} // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic interface MyInterface {...}\n</pre>",
      "mdDesc": "<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all interface names match a provided regular expression.</p>\n\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>:</p>\n<pre>\npublic interface myInterface {...} // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic interface MyInterface {...}\n</pre>",
      "severity": "MINOR",
      "status": "READY",
      "internalKey": "S114",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "convention"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [
        {
          "key": "format",
          "htmlDesc": "Regular expression used to check the interface names against.",
          "defaultValue": "^[A-Z][a-zA-Z0-9]*$",
          "type": "STRING"
        }
      ],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "10min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "10min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "10min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "10min",
      "remFnOverloaded": false,
      "type": "CODE_SMELL"
    },
    {
      "key": "squid:S1133",
      "repo": "squid",
      "name": "Deprecated code should be removed eventually",
      "createdAt": "2013-08-30T17:20:57+0200",
      "htmlDesc": "<p>This rule is meant to be used as a way to track code which is marked as being deprecated. Deprecated code should eventually be removed.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Foo {\n  /**\n   * @deprecated\n   */\n  public void foo() {    // Noncompliant\n  }\n\n  @Deprecated            // Noncompliant\n  public void bar() {\n  }\n\n  public void baz() {    // Compliant\n  }\n}\n</pre>",
      "mdDesc": "<p>This rule is meant to be used as a way to track code which is marked as being deprecated. Deprecated code should eventually be removed.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Foo {\n  /**\n   * @deprecated\n   */\n  public void foo() {    // Noncompliant\n  }\n\n  @Deprecated            // Noncompliant\n  public void bar() {\n  }\n\n  public void baz() {    // Compliant\n  }\n}\n</pre>",
      "severity": "INFO",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "obsolete"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "10min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "10min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "10min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "10min",
      "remFnOverloaded": false,
      "type": "CODE_SMELL"
    },
    {
      "key": "squid:S00119",
      "repo": "squid",
      "name": "Type parameter names should comply with a naming convention",
      "createdAt": "2013-06-19T09:21:15+0200",
      "htmlDesc": "<p>Shared naming conventions make it possible for a team to collaborate efficiently. Following the established convention of single-letter type parameter names helps users and maintainers of your code quickly see the difference between a type parameter and a poorly named class.</p>\n<p>This rule check that all type parameter names match a provided regular expression. The following code snippets use the default regular expression.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass&lt;TYPE&gt; { // Noncompliant\n  &lt;TYPE&gt; void method(TYPE t) { // Noncompliant\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass&lt;T&gt; { \n  &lt;T&gt; void method(T t) {\n  }\n}\n</pre>",
      "mdDesc": "<p>Shared naming conventions make it possible for a team to collaborate efficiently. Following the established convention of single-letter type parameter names helps users and maintainers of your code quickly see the difference between a type parameter and a poorly named class.</p>\n<p>This rule check that all type parameter names match a provided regular expression. The following code snippets use the default regular expression.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass&lt;TYPE&gt; { // Noncompliant\n  &lt;TYPE&gt; void method(TYPE t) { // Noncompliant\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass&lt;T&gt; { \n  &lt;T&gt; void method(T t) {\n  }\n}\n</pre>",
      "severity": "MINOR",
      "status": "READY",
      "internalKey": "S119",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "convention"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [
        {
          "key": "format",
          "htmlDesc": "Regular expression used to check the type parameter names against.",
          "defaultValue": "^[A-Z][0-9]?$",
          "type": "STRING"
        }
      ],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "10min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "10min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "10min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "10min",
      "remFnOverloaded": false,
      "type": "CODE_SMELL"
    },
    {
      "key": "squid:S2222",
      "repo": "squid",
      "name": "Locks should be released",
      "createdAt": "2015-05-20T05:01:39+0200",
      "htmlDesc": "<p>If a lock is acquired and released within a method, then it must be released along all execution paths of that method.</p>\n<p>Failing to do so will expose the conditional locking logic to the method's callers and hence be deadlock-prone.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  private Lock lock = new Lock();\n\n  public void doSomething() {\n    lock.lock(); // Noncompliant\n    if (isInitialized()) {\n      // ...\n      lock.unlock();\n    }\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  private Lock lock = new Lock();\n\n  public void doSomething() {\n    if (isInitialized()) {\n      lock.lock();\n      // ...\n      lock.unlock();\n    }\n  }\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"https://cwe.mitre.org/data/definitions/459.html\">MITRE, CWE-459</a> - Incomplete Cleanup\n</li></ul>",
      "mdDesc": "<p>If a lock is acquired and released within a method, then it must be released along all execution paths of that method.</p>\n<p>Failing to do so will expose the conditional locking logic to the method's callers and hence be deadlock-prone.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  private Lock lock = new Lock();\n\n  public void doSomething() {\n    lock.lock(); // Noncompliant\n    if (isInitialized()) {\n      // ...\n      lock.unlock();\n    }\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  private Lock lock = new Lock();\n\n  public void doSomething() {\n    if (isInitialized()) {\n      lock.lock();\n      // ...\n      lock.unlock();\n    }\n  }\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"https://cwe.mitre.org/data/definitions/459.html\">MITRE, CWE-459</a> - Incomplete Cleanup\n</li></ul>",
      "severity": "CRITICAL",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "cwe",
        "multi-threading"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "20min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "20min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "20min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "20min",
      "remFnOverloaded": false,
      "type": "BUG"
    },
    {
      "key": "squid:S1132",
      "repo": "squid",
      "name": "Strings literals should be placed on the left side when checking for equality",
      "createdAt": "2013-08-30T17:20:57+0200",
      "htmlDesc": "<p>It is preferable to place string literals on the left-hand side of an <code>equals()</code> or <code>equalsIgnoreCase()</code> method call.</p>\n<p>This prevents null pointer exceptions from being raised, as a string literal can never be null by definition.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nString myString = null;\n\nSystem.out.println(\"Equal? \" + myString.equals(\"foo\"));                        // Noncompliant; will raise a NPE\nSystem.out.println(\"Equal? \" + (myString != null &amp;&amp; myString.equals(\"foo\")));  // Noncompliant; null check could be removed\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nSystem.out.println(\"Equal?\" + \"foo\".equals(myString));                         // properly deals with the null case\n</pre>",
      "mdDesc": "<p>It is preferable to place string literals on the left-hand side of an <code>equals()</code> or <code>equalsIgnoreCase()</code> method call.</p>\n<p>This prevents null pointer exceptions from being raised, as a string literal can never be null by definition.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nString myString = null;\n\nSystem.out.println(\"Equal? \" + myString.equals(\"foo\"));                        // Noncompliant; will raise a NPE\nSystem.out.println(\"Equal? \" + (myString != null &amp;&amp; myString.equals(\"foo\")));  // Noncompliant; null check could be removed\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nSystem.out.println(\"Equal?\" + \"foo\".equals(myString));                         // properly deals with the null case\n</pre>",
      "severity": "MAJOR",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "bad-practice"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "10min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "10min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "10min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "10min",
      "remFnOverloaded": false,
      "type": "CODE_SMELL"
    },
    {
      "key": "squid:S00117",
      "repo": "squid",
      "name": "Local variable and method parameter names should comply with a naming convention",
      "createdAt": "2013-06-19T09:21:15+0200",
      "htmlDesc": "<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all local variable and function parameter names match a provided regular expression.</p>\n\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>\n<pre>\npublic void doSomething(int my_param) { \n  int LOCAL;    \n  ...             \n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(int myParam) { \n  int local;  \n  ...               \n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>Loop counters are ignored by this rule.</p>\n<pre>\nfor (int i = 0; i &lt; limit; i++) {  // Compliant\n  // ...\n}\n</pre>",
      "mdDesc": "<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all local variable and function parameter names match a provided regular expression.</p>\n\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>\n<pre>\npublic void doSomething(int my_param) { \n  int LOCAL;    \n  ...             \n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(int myParam) { \n  int local;  \n  ...               \n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>Loop counters are ignored by this rule.</p>\n<pre>\nfor (int i = 0; i &lt; limit; i++) {  // Compliant\n  // ...\n}\n</pre>",
      "severity": "MINOR",
      "status": "READY",
      "internalKey": "S117",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "convention"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [
        {
          "key": "format",
          "htmlDesc": "Regular expression used to check the names against.",
          "defaultValue": "^[a-z][a-zA-Z0-9]*$",
          "type": "STRING"
        }
      ],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "2min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "2min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "2min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "2min",
      "remFnOverloaded": false,
      "type": "CODE_SMELL"
    },
    {
      "key": "squid:S2583",
      "repo": "squid",
      "name": "Conditions should not unconditionally evaluate to \"TRUE\" or to \"FALSE\"",
      "createdAt": "2015-05-20T05:01:40+0200",
      "htmlDesc": "<p>Conditional statements using a condition which cannot be anything but <code>FALSE</code> have the effect of making blocks of code non-functional. If the condition cannot evaluate to anything but <code>TRUE</code>, the conditional statement is completely redundant, and makes the code less readable.</p>\n<p>It is quite likely that the code does not match the programmer's intent.</p>\n<p>Either the condition should be removed or it should be updated so that it does not always evaluate to <code>TRUE</code> or <code>FALSE</code>.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n//foo can't be both equal and not equal to bar in the same expression\nif( foo == bar &amp;&amp; something &amp;&amp; foo != bar) {...} \n</pre>\n<pre>\nprivate void compute(int foo) {\n  if (foo == 4 ) {\n    doSomething();\n    // We know foo is equal to 4 at this point, so the next condition is always false\n    if (foo &gt; 4) {...}\n    ...\n  }\n  ...\n}\n</pre>\n<pre>\nprivate void compute(boolean foo) {\n  if (foo) {\n    return;\n  }\n  doSomething();\n  // foo is always false here\n  if (foo){...}\n  ...\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted.\n</li><li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant\n</li><li> <a href=\"http://cwe.mitre.org/data/definitions/489\">MITRE, CWE-489</a> - Leftover Debug Code\n</li><li> <a href=\"http://cwe.mitre.org/data/definitions/570\">MITRE, CWE-570</a> - Expression is Always False\n</li><li> <a href=\"http://cwe.mitre.org/data/definitions/571\">MITRE, CWE-571</a> - Expression is Always True\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect\n</li></ul>",
      "mdDesc": "<p>Conditional statements using a condition which cannot be anything but <code>FALSE</code> have the effect of making blocks of code non-functional. If the condition cannot evaluate to anything but <code>TRUE</code>, the conditional statement is completely redundant, and makes the code less readable.</p>\n<p>It is quite likely that the code does not match the programmer's intent.</p>\n<p>Either the condition should be removed or it should be updated so that it does not always evaluate to <code>TRUE</code> or <code>FALSE</code>.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n//foo can't be both equal and not equal to bar in the same expression\nif( foo == bar &amp;&amp; something &amp;&amp; foo != bar) {...} \n</pre>\n<pre>\nprivate void compute(int foo) {\n  if (foo == 4 ) {\n    doSomething();\n    // We know foo is equal to 4 at this point, so the next condition is always false\n    if (foo &gt; 4) {...}\n    ...\n  }\n  ...\n}\n</pre>\n<pre>\nprivate void compute(boolean foo) {\n  if (foo) {\n    return;\n  }\n  doSomething();\n  // foo is always false here\n  if (foo){...}\n  ...\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted.\n</li><li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant\n</li><li> <a href=\"http://cwe.mitre.org/data/definitions/489\">MITRE, CWE-489</a> - Leftover Debug Code\n</li><li> <a href=\"http://cwe.mitre.org/data/definitions/570\">MITRE, CWE-570</a> - Expression is Always False\n</li><li> <a href=\"http://cwe.mitre.org/data/definitions/571\">MITRE, CWE-571</a> - Expression is Always True\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect\n</li></ul>",
      "severity": "CRITICAL",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "cert",
        "cwe",
        "misra"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "15min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "15min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "15min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "15min",
      "remFnOverloaded": false,
      "type": "BUG"
    },
    {
      "key": "squid:S2109",
      "repo": "squid",
      "name": "Reflection should not be used to check non-runtime annotations",
      "createdAt": "2015-01-08T13:39:42+0100",
      "htmlDesc": "<p>The writer of an annotation can set one of three retention policies for it:</p>\n<ul>\n<li> <code>RetentionPolicy.SOURCE</code> - these annotations are dropped during compilation, E.G. <code>@Override</code>, <code>@SuppressWarnings</code>.\n</li><li> <code>RetentionPolicy.CLASS</code> - these annotations are present in a compiled class but not loaded into the JVM at runtime. This is the default.\n</li><li> <code>RetentionPolicy.RUNTIME</code> - these annotations are present in the class file and loaded into the JVM.\n</li></ul>\n<p>Only annotations that have been given a <code>RUNTIME</code> retention policy will be available to reflection. Testing for annotations with any other retention policy is simply an error, since the test will always return false.</p>\n<p>This rule checks that reflection is not used to detect annotations that do not have <code>RUNTIME</code> retention.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nMethod m = String.class.getMethod(\"getBytes\", new Class[] {int.class,\nint.class, byte[].class, int.class});\nif (m.isAnnotationPresent(Override.class)) {  // Noncompliant; test will always return false, even when @Override is present in the code\n</pre>",
      "mdDesc": "<p>The writer of an annotation can set one of three retention policies for it:</p>\n<ul>\n<li> <code>RetentionPolicy.SOURCE</code> - these annotations are dropped during compilation, E.G. <code>@Override</code>, <code>@SuppressWarnings</code>.\n</li><li> <code>RetentionPolicy.CLASS</code> - these annotations are present in a compiled class but not loaded into the JVM at runtime. This is the default.\n</li><li> <code>RetentionPolicy.RUNTIME</code> - these annotations are present in the class file and loaded into the JVM.\n</li></ul>\n<p>Only annotations that have been given a <code>RUNTIME</code> retention policy will be available to reflection. Testing for annotations with any other retention policy is simply an error, since the test will always return false.</p>\n<p>This rule checks that reflection is not used to detect annotations that do not have <code>RUNTIME</code> retention.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nMethod m = String.class.getMethod(\"getBytes\", new Class[] {int.class,\nint.class, byte[].class, int.class});\nif (m.isAnnotationPresent(Override.class)) {  // Noncompliant; test will always return false, even when @Override is present in the code\n</pre>",
      "severity": "BLOCKER",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "15min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "15min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "15min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "15min",
      "remFnOverloaded": false,
      "type": "BUG"
    },
    {
      "key": "squid:S3438",
      "repo": "squid",
      "name": "\"SingleConnectionFactory\" instances should be set to \"reconnectOnException\"",
      "createdAt": "2016-01-25T14:33:27+0100",
      "htmlDesc": "<p>Use of a Spring <code>SingleConnectionFactory</code> without enabling the <code>reconnectOnException</code> setting will prevent automatic connection recovery when the connection goes bad. </p>\n<p>That's because the <code>reconnectOnException</code> property defaults to <code>false</code>. As a result, even if the code that uses this connection factory (Spring's <code>DefaultMessageListenerContainer</code> or your own code) has reconnect logic, that code won't work because the <code>SingleConnectionFactory</code> will act like a single-connection pool by preventing connection <code>close</code> calls from actually closing anything. As a result, subsequent factory <code>create</code> operations will just hand back the original broken <code>Connection</code>.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n &lt;bean id=\"singleCF\" class=\"org.springframework.jms.connection.SingleConnectionFactory\"&gt;  &lt;!-- Noncompliant --&gt;\n   &lt;constructor-arg ref=\"dummyConnectionFactory\" /&gt;\n &lt;/bean&gt;\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n &lt;bean id=\"singleCF\" class=\"org.springframework.jms.connection.SingleConnectionFactory\" p:reconnectOnException=\"true\"&gt;\n   &lt;constructor-arg ref=\"dummyConnectionFactory\" /&gt;\n &lt;/bean&gt;\n</pre>\n<p>or</p>\n<pre>\n &lt;bean id=\"singleCF\" class=\"org.springframework.jms.connection.SingleConnectionFactory\"&gt;\n   &lt;constructor-arg ref=\"dummyConnectionFactory\" /&gt;\n   &lt;property name=\"reconnectOnException\"&gt;&lt;value&gt;true&lt;/value&gt;&lt;/property&gt;\n &lt;/bean&gt;\n</pre>",
      "mdDesc": "<p>Use of a Spring <code>SingleConnectionFactory</code> without enabling the <code>reconnectOnException</code> setting will prevent automatic connection recovery when the connection goes bad. </p>\n<p>That's because the <code>reconnectOnException</code> property defaults to <code>false</code>. As a result, even if the code that uses this connection factory (Spring's <code>DefaultMessageListenerContainer</code> or your own code) has reconnect logic, that code won't work because the <code>SingleConnectionFactory</code> will act like a single-connection pool by preventing connection <code>close</code> calls from actually closing anything. As a result, subsequent factory <code>create</code> operations will just hand back the original broken <code>Connection</code>.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n &lt;bean id=\"singleCF\" class=\"org.springframework.jms.connection.SingleConnectionFactory\"&gt;  &lt;!-- Noncompliant --&gt;\n   &lt;constructor-arg ref=\"dummyConnectionFactory\" /&gt;\n &lt;/bean&gt;\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n &lt;bean id=\"singleCF\" class=\"org.springframework.jms.connection.SingleConnectionFactory\" p:reconnectOnException=\"true\"&gt;\n   &lt;constructor-arg ref=\"dummyConnectionFactory\" /&gt;\n &lt;/bean&gt;\n</pre>\n<p>or</p>\n<pre>\n &lt;bean id=\"singleCF\" class=\"org.springframework.jms.connection.SingleConnectionFactory\"&gt;\n   &lt;constructor-arg ref=\"dummyConnectionFactory\" /&gt;\n   &lt;property name=\"reconnectOnException\"&gt;&lt;value&gt;true&lt;/value&gt;&lt;/property&gt;\n &lt;/bean&gt;\n</pre>",
      "severity": "CRITICAL",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "spring"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "2min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "2min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "2min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "2min",
      "remFnOverloaded": false,
      "type": "BUG"
    },
    {
      "key": "squid:S00122",
      "repo": "squid",
      "name": "Statements should be on separate lines",
      "createdAt": "2013-06-19T09:21:15+0200",
      "htmlDesc": "<p>For better readability, do not put more than one statement on a single line.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(someCondition) doSomething();\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif(someCondition) {\n  doSomething();\n}\n</pre>",
      "mdDesc": "<p>For better readability, do not put more than one statement on a single line.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(someCondition) doSomething();\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif(someCondition) {\n  doSomething();\n}\n</pre>",
      "severity": "MINOR",
      "status": "READY",
      "internalKey": "S122",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "convention"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "1min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "1min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "1min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "1min",
      "remFnOverloaded": false,
      "type": "CODE_SMELL"
    },
    {
      "key": "squid:S00120",
      "repo": "squid",
      "name": "Package names should comply with a naming convention",
      "createdAt": "2013-06-19T09:21:15+0200",
      "htmlDesc": "<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all package names match a provided regular expression.</p>\n\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[a-z]+(\\.[a-z][a-z0-9]*)*$</code>:</p>\n<pre>\npackage org.exAmple; // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npackage org.example; \n</pre>",
      "mdDesc": "<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all package names match a provided regular expression.</p>\n\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[a-z]+(\\.[a-z][a-z0-9]*)*$</code>:</p>\n<pre>\npackage org.exAmple; // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npackage org.example; \n</pre>",
      "severity": "MINOR",
      "status": "READY",
      "internalKey": "S120",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "convention"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [
        {
          "key": "format",
          "htmlDesc": "Regular expression used to check the package names against.",
          "defaultValue": "^[a-z]+(\\.[a-z][a-z0-9]*)*$",
          "type": "STRING"
        }
      ],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "10min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "10min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "10min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "10min",
      "remFnOverloaded": false,
      "type": "CODE_SMELL"
    },
    {
      "key": "squid:S1940",
      "repo": "squid",
      "name": "Boolean checks should not be inverted",
      "createdAt": "2015-06-04T13:56:30+0200",
      "htmlDesc": "<p>It is needlessly complex to invert the result of a boolean comparison. The opposite comparison should be made instead.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ( !(a == 2)) { ...}  // Noncompliant\nboolean b = !(i &lt; 10);  // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (a != 2) { ...} \nboolean b = (i &gt;= 10);\n</pre>",
      "mdDesc": "<p>It is needlessly complex to invert the result of a boolean comparison. The opposite comparison should be made instead.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ( !(a == 2)) { ...}  // Noncompliant\nboolean b = !(i &lt; 10);  // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (a != 2) { ...} \nboolean b = (i &gt;= 10);\n</pre>",
      "severity": "MINOR",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "pitfall"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "2min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "2min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "2min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "2min",
      "remFnOverloaded": false,
      "type": "CODE_SMELL"
    },
    {
      "key": "squid:S2236",
      "repo": "squid",
      "name": "Methods \"wait(...)\", \"notify()\" and \"notifyAll()\" should not be called on Thread instances",
      "createdAt": "2015-01-05T09:08:32+0100",
      "htmlDesc": "<p>On a Thread instance, the methods <code>wait(...)</code>, <code>notify()</code> and <code>notifyAll()</code> are available only because all classes in Java extend <code>Object</code> and therefore automatically inherit the methods. But there are two very good reasons to not call these methods on a Thread instance:</p>\n<ul>\n<li> Doing so is really confusing. What is really expected when calling, for instance, the <code>wait(...)</code> method on a Thread? That the execution of the Thread is suspended, or that acquisition of the object monitor is waited for?\n</li><li> Internally, the JVM relies on these methods to change the state of the Thread (<code>BLOCKED</code>, <code>WAITING</code>, ...), so calling them will corrupt the behavior of the JVM.\n</li></ul>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nThread myThread = new Thread(new RunnableJob());\n...\nmyThread.wait(2000);\n</pre>",
      "mdDesc": "<p>On a Thread instance, the methods <code>wait(...)</code>, <code>notify()</code> and <code>notifyAll()</code> are available only because all classes in Java extend <code>Object</code> and therefore automatically inherit the methods. But there are two very good reasons to not call these methods on a Thread instance:</p>\n<ul>\n<li> Doing so is really confusing. What is really expected when calling, for instance, the <code>wait(...)</code> method on a Thread? That the execution of the Thread is suspended, or that acquisition of the object monitor is waited for?\n</li><li> Internally, the JVM relies on these methods to change the state of the Thread (<code>BLOCKED</code>, <code>WAITING</code>, ...), so calling them will corrupt the behavior of the JVM.\n</li></ul>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nThread myThread = new Thread(new RunnableJob());\n...\nmyThread.wait(2000);\n</pre>",
      "severity": "BLOCKER",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "multi-threading"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "30min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "30min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "30min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "30min",
      "remFnOverloaded": false,
      "type": "BUG"
    },
    {
      "key": "squid:S1148",
      "repo": "squid",
      "name": "Throwable.printStackTrace(...) should not be called",
      "createdAt": "2013-08-30T17:20:57+0200",
      "htmlDesc": "<p><code>Throwable.printStackTrace(...)</code> prints a throwable and its stack trace to some stream.</p>\n<p>Loggers should be used instead to print throwables, as they have many advantages:</p>\n<ul>\n<li> Users are able to easily retrieve the logs.\n</li><li> The format of log messages is uniform and allow users to browse the logs easily.\n</li></ul>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry {\n  /* ... */\n} catch(Exception e) {\n  e.printStackTrace();        // Noncompliant\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\ntry {\n  /* ... */\n} catch(Exception e) {\n  LOGGER.log(\"context\", e);\n}\n</pre>",
      "mdDesc": "<p><code>Throwable.printStackTrace(...)</code> prints a throwable and its stack trace to some stream.</p>\n<p>Loggers should be used instead to print throwables, as they have many advantages:</p>\n<ul>\n<li> Users are able to easily retrieve the logs.\n</li><li> The format of log messages is uniform and allow users to browse the logs easily.\n</li></ul>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry {\n  /* ... */\n} catch(Exception e) {\n  e.printStackTrace();        // Noncompliant\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\ntry {\n  /* ... */\n} catch(Exception e) {\n  LOGGER.log(\"context\", e);\n}\n</pre>",
      "severity": "CRITICAL",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "error-handling"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "10min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "10min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "10min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "10min",
      "remFnOverloaded": false,
      "type": "VULNERABILITY"
    },
    {
      "key": "squid:S00104",
      "repo": "squid",
      "name": "Files should not have too many lines",
      "createdAt": "2013-06-19T09:21:15+0200",
      "htmlDesc": "<p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain.</p>\n<p>Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks.</p>\n<p>Those smaller files will not only be easier to understand but also probably easier to test.</p>",
      "mdDesc": "<p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain.</p>\n<p>Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks.</p>\n<p>Those smaller files will not only be easier to understand but also probably easier to test.</p>",
      "severity": "MAJOR",
      "status": "READY",
      "internalKey": "S104",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "brain-overload"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [
        {
          "key": "Max",
          "htmlDesc": "Maximum authorized lines in a file.",
          "defaultValue": "1000",
          "type": "INTEGER"
        }
      ],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "1h",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "1h",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "1h",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "1h",
      "remFnOverloaded": false,
      "type": "CODE_SMELL"
    },
    {
      "key": "squid:S2116",
      "repo": "squid",
      "name": "\"hashCode\" and \"toString\" should not be called on array instances",
      "createdAt": "2015-01-08T13:39:42+0100",
      "htmlDesc": "<p>While <code>hashCode</code> and <code>toString</code> are available on arrays, they are largely useless. <code>hashCode</code> returns the array's \"identity hash code\", and <code>toString</code> returns nearly the same value. Neither method's output actually reflects the array's contents. Instead, you should pass the array to the relevant static <code>Arrays</code> method.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic static void main( String[] args )\n{\n    String argStr = args.toString(); // Noncompliant\n    int argHash = args.hashCode(); // Noncompliant\n\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic static void main( String[] args )\n{\n    String argStr = Arrays.toString(args);\n    int argHash = Arrays.hashCode(args);\n\n</pre>",
      "mdDesc": "<p>While <code>hashCode</code> and <code>toString</code> are available on arrays, they are largely useless. <code>hashCode</code> returns the array's \"identity hash code\", and <code>toString</code> returns nearly the same value. Neither method's output actually reflects the array's contents. Instead, you should pass the array to the relevant static <code>Arrays</code> method.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic static void main( String[] args )\n{\n    String argStr = args.toString(); // Noncompliant\n    int argHash = args.hashCode(); // Noncompliant\n\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic static void main( String[] args )\n{\n    String argStr = Arrays.toString(args);\n    int argHash = Arrays.hashCode(args);\n\n</pre>",
      "severity": "CRITICAL",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "5min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "5min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "5min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "5min",
      "remFnOverloaded": false,
      "type": "BUG"
    },
    {
      "key": "squid:S1147",
      "repo": "squid",
      "name": "Exit methods should not be called",
      "createdAt": "2013-08-30T17:20:57+0200",
      "htmlDesc": "<p>Calling <code>System.exit(int status)</code> or <code>Rutime.getRuntime().exit(int status)</code> calls the shutdown hooks and shuts downs the entire Java virtual machine. Calling <code>Runtime.getRuntime().halt(int)</code> does an immediate shutdown, without calling the shutdown hooks, and skipping finalization.</p>\n<p>Each of these methods should be used with extreme care, and only when the intent is to stop the whole Java process. For instance, none of them should be called from applications running in a J2EE container.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nSystem.exit(0);\nRuntime.getRuntime().exit(0);\nRuntime.getRuntime().halt(0);\n</pre>\n\n<h2>Exceptions</h2>\n<p>These methods are ignored inside <code>main</code>.</p>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/382.html\">MITRE, CWE-382</a> - Use of System.exit()\n</li></ul>",
      "mdDesc": "<p>Calling <code>System.exit(int status)</code> or <code>Rutime.getRuntime().exit(int status)</code> calls the shutdown hooks and shuts downs the entire Java virtual machine. Calling <code>Runtime.getRuntime().halt(int)</code> does an immediate shutdown, without calling the shutdown hooks, and skipping finalization.</p>\n<p>Each of these methods should be used with extreme care, and only when the intent is to stop the whole Java process. For instance, none of them should be called from applications running in a J2EE container.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nSystem.exit(0);\nRuntime.getRuntime().exit(0);\nRuntime.getRuntime().halt(0);\n</pre>\n\n<h2>Exceptions</h2>\n<p>These methods are ignored inside <code>main</code>.</p>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/382.html\">MITRE, CWE-382</a> - Use of System.exit()\n</li></ul>",
      "severity": "MAJOR",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "cert",
        "cwe",
        "suspicious"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "30min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "30min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "30min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "30min",
      "remFnOverloaded": false,
      "type": "CODE_SMELL"
    },
    {
      "key": "squid:S2235",
      "repo": "squid",
      "name": "IllegalMonitorStateException should not be caught",
      "createdAt": "2015-01-05T09:08:32+0100",
      "htmlDesc": "<p>According to Oracle Javadoc:</p>\n<blockquote>\n<p><code>IllegalMonitorStateException</code> is thrown when a thread has attempted to wait on an object's monitor or to notify other threads waiting on an object's monitor without owning the specified monitor.</p>\n</blockquote>\n<p>In other words, this exception can be thrown only in case of bad design because <code>Object.wait(...)</code>, <code>Object.notify()</code> and <code>Object.notifyAll()</code> methods should never be called on an object whose monitor is not held. </p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething(){\n  ...\n  try {\n    ...\n    anObject.notify();\n    ...\n  } catch(IllegalMonitorStateException e) {\n    ...\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(){\n  ...\n  synchronized(anObject) {\n    ...\n    anObject.notify();\n    ...\n  }\n}\n</pre>",
      "mdDesc": "<p>According to Oracle Javadoc:</p>\n<blockquote>\n<p><code>IllegalMonitorStateException</code> is thrown when a thread has attempted to wait on an object's monitor or to notify other threads waiting on an object's monitor without owning the specified monitor.</p>\n</blockquote>\n<p>In other words, this exception can be thrown only in case of bad design because <code>Object.wait(...)</code>, <code>Object.notify()</code> and <code>Object.notifyAll()</code> methods should never be called on an object whose monitor is not held. </p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething(){\n  ...\n  try {\n    ...\n    anObject.notify();\n    ...\n  } catch(IllegalMonitorStateException e) {\n    ...\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(){\n  ...\n  synchronized(anObject) {\n    ...\n    anObject.notify();\n    ...\n  }\n}\n</pre>",
      "severity": "CRITICAL",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "multi-threading"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "20min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "20min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "20min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "20min",
      "remFnOverloaded": false,
      "type": "BUG"
    },
    {
      "key": "squid:S2114",
      "repo": "squid",
      "name": "Collections should not be passed as arguments to their own methods",
      "createdAt": "2014-11-19T08:29:01+0100",
      "htmlDesc": "<p>Passing a collection as an argument to the collection's own method is either an error - some other argument was intended - or simply nonsensical code. </p>\n<p>Further, because some methods require that the argument remain unmodified during the execution, passing a collection to itself can result in undefined behavior. </p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nList &lt;Object&gt; objs = new ArrayList&lt;Object&gt;();\nobjs.add(\"Hello\");\n\nobjs.add(objs); // Noncompliant; StackOverflowException if objs.hashCode() called\nobjs.addAll(objs); // Noncompliant; behavior undefined\nobjs.containsAll(objs); // Noncompliant; always true\nobjs.removeAll(objs); // Noncompliant; confusing. Use clear() instead\nobjs.retainAll(objs); // Noncompliant; NOOP\n</pre>",
      "mdDesc": "<p>Passing a collection as an argument to the collection's own method is either an error - some other argument was intended - or simply nonsensical code. </p>\n<p>Further, because some methods require that the argument remain unmodified during the execution, passing a collection to itself can result in undefined behavior. </p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nList &lt;Object&gt; objs = new ArrayList&lt;Object&gt;();\nobjs.add(\"Hello\");\n\nobjs.add(objs); // Noncompliant; StackOverflowException if objs.hashCode() called\nobjs.addAll(objs); // Noncompliant; behavior undefined\nobjs.containsAll(objs); // Noncompliant; always true\nobjs.removeAll(objs); // Noncompliant; confusing. Use clear() instead\nobjs.retainAll(objs); // Noncompliant; NOOP\n</pre>",
      "severity": "CRITICAL",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "15min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "15min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "15min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "15min",
      "remFnOverloaded": false,
      "type": "BUG"
    },
    {
      "key": "squid:S1145",
      "repo": "squid",
      "name": "Useless \"if(true) {...}\" and \"if(false){...}\" blocks should be removed",
      "createdAt": "2013-08-30T17:20:57+0200",
      "htmlDesc": "<p><code>if</code> statements with conditions that are always false have the effect of making blocks of code non-functional. <code>if</code> statements with conditions that are always true are completely redundant, and make the code less readable.</p>\n<p>There are three possible causes for the presence of such code: </p>\n<ul>\n<li> An if statement was changed during debugging and that debug code has been committed.\n</li><li> Some value was left unset.\n</li><li> Some logic is not doing what the programmer thought it did.\n</li></ul>\n<p>In any of these cases, unconditional <code>if</code> statements should be removed.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (true) {  \n  doSomething(); \n}\n...\nif (false) {  \n  doSomethingElse(); \n}\n\nif (2 &lt; 3 ) { ... }  // Noncompliant; always false\n\nint i = 0;\nint j = 0;\n// ...\nj = foo();\n\nif (j &gt; 0 &amp;&amp; i &gt; 0) { ... }  // Noncompliant; always false - i never set after initialization\n\nboolean b = true;\n//...\nif (b || !b) { ... }  // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\ndoSomething(); \n...\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/489.html\">MITRE, CWE-489</a> - Leftover Debug Code\n</li><li> <a href=\"http://cwe.mitre.org/data/definitions/570.html\">MITRE, CWE-570</a> - Expression is Always False\n</li><li> <a href=\"http://cwe.mitre.org/data/definitions/571.html\">MITRE, CWE-571</a> - Expression is Always True\n</li><li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted.\n</li><li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant\n</li></ul>",
      "mdDesc": "<p><code>if</code> statements with conditions that are always false have the effect of making blocks of code non-functional. <code>if</code> statements with conditions that are always true are completely redundant, and make the code less readable.</p>\n<p>There are three possible causes for the presence of such code: </p>\n<ul>\n<li> An if statement was changed during debugging and that debug code has been committed.\n</li><li> Some value was left unset.\n</li><li> Some logic is not doing what the programmer thought it did.\n</li></ul>\n<p>In any of these cases, unconditional <code>if</code> statements should be removed.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (true) {  \n  doSomething(); \n}\n...\nif (false) {  \n  doSomethingElse(); \n}\n\nif (2 &lt; 3 ) { ... }  // Noncompliant; always false\n\nint i = 0;\nint j = 0;\n// ...\nj = foo();\n\nif (j &gt; 0 &amp;&amp; i &gt; 0) { ... }  // Noncompliant; always false - i never set after initialization\n\nboolean b = true;\n//...\nif (b || !b) { ... }  // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\ndoSomething(); \n...\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/489.html\">MITRE, CWE-489</a> - Leftover Debug Code\n</li><li> <a href=\"http://cwe.mitre.org/data/definitions/570.html\">MITRE, CWE-570</a> - Expression is Always False\n</li><li> <a href=\"http://cwe.mitre.org/data/definitions/571.html\">MITRE, CWE-571</a> - Expression is Always True\n</li><li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted.\n</li><li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant\n</li></ul>",
      "severity": "MAJOR",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "cwe",
        "misra"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "2min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "2min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "2min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "2min",
      "remFnOverloaded": false,
      "type": "CODE_SMELL"
    },
    {
      "key": "squid:S2111",
      "repo": "squid",
      "name": "\"BigDecimal(double)\" should not be used",
      "createdAt": "2015-01-08T13:39:42+0100",
      "htmlDesc": "<p>Because of floating point imprecision, you're unlikely to get the value you expect from the <code>BigDecimal(double)</code> constructor. </p>\n<p>From <a href=\"http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html#BigDecimal(double)\">the JavaDocs</a>:</p>\n<blockquote>The results of this constructor can be somewhat unpredictable. One might assume that writing new BigDecimal(0.1) in Java creates a BigDecimal which is exactly equal to 0.1 (an unscaled value of 1, with a scale of 1), but it is actually equal to 0.1000000000000000055511151231257827021181583404541015625. This is because 0.1 cannot be represented exactly as a double (or, for that matter, as a binary fraction of any finite length). Thus, the value that is being passed in to the constructor is not exactly equal to 0.1, appearances notwithstanding.</blockquote>\n<p>Instead, you should use <code>BigDecimal.valueOf</code>, which uses a string under the covers to eliminate floating point rounding errors.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\ndouble d = 1.1;\n\nBigDecimal bd1 = new BigDecimal(d); // Noncompliant; see comment above\nBigDecimal bd2 = new BigDecimal(1.1); // Noncompliant; same result\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\ndouble d = 1.1;\n\nBigDecimal bd1 = BigDecimal.valueOf(d);\nBigDecimal bd2 = BigDecimal.valueOf(1.1);\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"https://www.securecoding.cert.org/confluence/x/NQAVAg\">CERT, NUM10-J.</a> - Do not construct BigDecimal objects from floating-point literals\n</li></ul>",
      "mdDesc": "<p>Because of floating point imprecision, you're unlikely to get the value you expect from the <code>BigDecimal(double)</code> constructor. </p>\n<p>From <a href=\"http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html#BigDecimal(double)\">the JavaDocs</a>:</p>\n<blockquote>The results of this constructor can be somewhat unpredictable. One might assume that writing new BigDecimal(0.1) in Java creates a BigDecimal which is exactly equal to 0.1 (an unscaled value of 1, with a scale of 1), but it is actually equal to 0.1000000000000000055511151231257827021181583404541015625. This is because 0.1 cannot be represented exactly as a double (or, for that matter, as a binary fraction of any finite length). Thus, the value that is being passed in to the constructor is not exactly equal to 0.1, appearances notwithstanding.</blockquote>\n<p>Instead, you should use <code>BigDecimal.valueOf</code>, which uses a string under the covers to eliminate floating point rounding errors.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\ndouble d = 1.1;\n\nBigDecimal bd1 = new BigDecimal(d); // Noncompliant; see comment above\nBigDecimal bd2 = new BigDecimal(1.1); // Noncompliant; same result\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\ndouble d = 1.1;\n\nBigDecimal bd1 = BigDecimal.valueOf(d);\nBigDecimal bd2 = BigDecimal.valueOf(1.1);\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"https://www.securecoding.cert.org/confluence/x/NQAVAg\">CERT, NUM10-J.</a> - Do not construct BigDecimal objects from floating-point literals\n</li></ul>",
      "severity": "CRITICAL",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "cert"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "5min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "5min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "5min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "5min",
      "remFnOverloaded": false,
      "type": "BUG"
    },
    {
      "key": "squid:S2232",
      "repo": "squid",
      "name": "\"ResultSet.isLast()\" should not be used",
      "createdAt": "2015-01-05T09:08:32+0100",
      "htmlDesc": "<p>There are several reasons to avoid <code>ResultSet.isLast()</code>. First, support for this method is optional for <code>TYPE_FORWARD_ONLY</code> result sets. Second, it can be expensive (the driver may need to fetch the next row to answer the question). Finally, the specification is not clear on what should be returned when the <code>ResultSet</code> is empty, so some drivers may return the opposite of what is expected.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nstmt.executeQuery(\"SELECT name, address FROM PERSON\");\nResultSet rs = stmt.getResultSet();\nwhile (! rs.isLast()) { // Noncompliant\n  // process row\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nResultSet rs = stmt.executeQuery(\"SELECT name, address FROM PERSON\");\nwhile (! rs.next()) {\n  // process row\n}\n</pre>",
      "mdDesc": "<p>There are several reasons to avoid <code>ResultSet.isLast()</code>. First, support for this method is optional for <code>TYPE_FORWARD_ONLY</code> result sets. Second, it can be expensive (the driver may need to fetch the next row to answer the question). Finally, the specification is not clear on what should be returned when the <code>ResultSet</code> is empty, so some drivers may return the opposite of what is expected.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nstmt.executeQuery(\"SELECT name, address FROM PERSON\");\nResultSet rs = stmt.getResultSet();\nwhile (! rs.isLast()) { // Noncompliant\n  // process row\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nResultSet rs = stmt.executeQuery(\"SELECT name, address FROM PERSON\");\nwhile (! rs.next()) {\n  // process row\n}\n</pre>",
      "severity": "MAJOR",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "performance",
        "pitfall",
        "sql"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "10min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "10min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "10min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "10min",
      "remFnOverloaded": false,
      "type": "CODE_SMELL"
    },
    {
      "key": "squid:S00108",
      "repo": "squid",
      "name": "Nested blocks of code should not be left empty",
      "createdAt": "2013-06-19T09:21:15+0200",
      "htmlDesc": "<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 0; i &lt; 42; i++){}  // Empty on purpose or missing piece of code ?\n</pre>\n\n<h2>Exceptions</h2>\n<p>When a block contains a comment, this block is not considered to be empty unless it is a <code>synchronized</code> block. <code>synchronized</code> blocks are still considered empty even with comments because they can still affect program flow.</p>",
      "mdDesc": "<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 0; i &lt; 42; i++){}  // Empty on purpose or missing piece of code ?\n</pre>\n\n<h2>Exceptions</h2>\n<p>When a block contains a comment, this block is not considered to be empty unless it is a <code>synchronized</code> block. <code>synchronized</code> blocks are still considered empty even with comments because they can still affect program flow.</p>",
      "severity": "MAJOR",
      "status": "READY",
      "internalKey": "S108",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "suspicious"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "5min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "5min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "5min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "5min",
      "remFnOverloaded": false,
      "type": "CODE_SMELL"
    },
    {
      "key": "squid:S1264",
      "repo": "squid",
      "name": "A \"while\" loop should be used instead of a \"for\" loop",
      "createdAt": "2015-06-04T13:56:30+0200",
      "htmlDesc": "<p>When only the condition expression is defined in a <code>for</code> loop, but the init and increment expressions are missing, a <code>while</code> loop should be used instead to increase readability. </p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (;condition;) { /*...*/ }\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nwhile (condition) { /*...*/ }\n</pre>",
      "mdDesc": "<p>When only the condition expression is defined in a <code>for</code> loop, but the init and increment expressions are missing, a <code>while</code> loop should be used instead to increase readability. </p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (;condition;) { /*...*/ }\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nwhile (condition) { /*...*/ }\n</pre>",
      "severity": "MINOR",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "clumsy"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "5min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "5min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "5min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "5min",
      "remFnOverloaded": false,
      "type": "CODE_SMELL"
    },
    {
      "key": "squid:S2112",
      "repo": "squid",
      "name": "\"URL.hashCode\" and \"URL.equals\" should be avoided",
      "createdAt": "2015-04-01T10:36:58+0200",
      "htmlDesc": "<p>The <code>equals</code> and <code>hashCode</code> methods of <code>java.net.URL</code> both make calls out to the Internet and are blocking operations. <code>URI</code> on the other hand makes no such calls and should be used instead unless the specific <code>URL</code> functionality is required.</p>\n<p>This rule checks for uses of <code>URL</code> 's in <code>Map</code> and <code>Set</code> , and for explicit calls to the <code>equals</code> and <code>hashCode</code> methods.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void checkUrl(URL url) {\n  Set&lt;URL&gt; sites = new HashSet&lt;URL&gt;();  // Noncompliant\n\n  URL homepage = new URL(\"http://sonarsource.com\");  // Compliant\n  if (homepage.equals(url)) { // Noncompliant\n    // ...\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic void checkUrl(URL url) {\n  Set&lt;URI&gt; sites = new HashSet&lt;URI&gt;();  // Compliant\n\n  URI homepage = new URI(\"http://sonarsource.com\");  // Compliant\n  URI uri = url.toURI();\n  if (homepage.equals(uri)) {  // Compliant\n    // ...\n  }\n}\n</pre>",
      "mdDesc": "<p>The <code>equals</code> and <code>hashCode</code> methods of <code>java.net.URL</code> both make calls out to the Internet and are blocking operations. <code>URI</code> on the other hand makes no such calls and should be used instead unless the specific <code>URL</code> functionality is required.</p>\n<p>This rule checks for uses of <code>URL</code> 's in <code>Map</code> and <code>Set</code> , and for explicit calls to the <code>equals</code> and <code>hashCode</code> methods.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void checkUrl(URL url) {\n  Set&lt;URL&gt; sites = new HashSet&lt;URL&gt;();  // Noncompliant\n\n  URL homepage = new URL(\"http://sonarsource.com\");  // Compliant\n  if (homepage.equals(url)) { // Noncompliant\n    // ...\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic void checkUrl(URL url) {\n  Set&lt;URI&gt; sites = new HashSet&lt;URI&gt;();  // Compliant\n\n  URI homepage = new URI(\"http://sonarsource.com\");  // Compliant\n  URI uri = url.toURI();\n  if (homepage.equals(uri)) {  // Compliant\n    // ...\n  }\n}\n</pre>",
      "severity": "MAJOR",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "performance"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "20min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "20min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "20min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "20min",
      "remFnOverloaded": false,
      "type": "CODE_SMELL"
    },
    {
      "key": "squid:S1143",
      "repo": "squid",
      "name": "Jump statements should not occur in \"finally\" blocks",
      "createdAt": "2013-08-30T17:20:57+0200",
      "htmlDesc": "<p><code>return</code>ing, <code>break</code>ing, <code>throw</code>ing, and so on from a <code>finally</code> block suppresses the propagation of any unhandled <code>Throwable</code> which was thrown in the <code>try</code> or <code>catch</code> block.</p>\n<p>This rule raises an issue when a jump statement (<code>break</code>, <code>continue</code>, <code>return</code>, <code>throw</code>, and <code>goto</code>) would force control flow to leave a <code>finally</code> block. </p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic static void main(String[] args) {\n  try {\n    doSomethingWhichThrowsException();\n    System.out.println(\"OK\");   // incorrect \"OK\" message is printed\n  } catch (RuntimeException e) {\n    System.out.println(\"ERROR\");  // this message is not shown\n  }\n}\n\npublic static void doSomethingWhichThrowsException() {\n  try {\n    throw new RuntimeException();\n  } finally {\n    for (int i = 0; i &lt; 10; i ++) {\n      //...\n      if (q == i) {\n        break; // ignored\n      }\n    }\n\n    /* ... */\n    return;      // Noncompliant - prevents the RuntimeException from being propagated\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic static void main(String[] args) {\n  try {\n    doSomethingWhichThrowsException();\n    System.out.println(\"OK\");\n  } catch (RuntimeException e) {\n    System.out.println(\"ERROR\");  // \"ERROR\" is printed as expected\n  }\n}\n\npublic static void doSomethingWhichThrowsException() {\n  try {\n    throw new RuntimeException();\n  } finally {\n    for (int i = 0; i &lt; 10; i ++) {\n      //...\n      if (q == i) {\n        break; // ignored\n      }\n    }\n\n    /* ... */\n  }\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/584.html\">MITRE, CWE-584</a> - Return Inside Finally Block\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/mIEbAQ\">CERT, ERR04-J.</a> - Do not complete abruptly from a finally block\n</li></ul>",
      "mdDesc": "<p><code>return</code>ing, <code>break</code>ing, <code>throw</code>ing, and so on from a <code>finally</code> block suppresses the propagation of any unhandled <code>Throwable</code> which was thrown in the <code>try</code> or <code>catch</code> block.</p>\n<p>This rule raises an issue when a jump statement (<code>break</code>, <code>continue</code>, <code>return</code>, <code>throw</code>, and <code>goto</code>) would force control flow to leave a <code>finally</code> block. </p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic static void main(String[] args) {\n  try {\n    doSomethingWhichThrowsException();\n    System.out.println(\"OK\");   // incorrect \"OK\" message is printed\n  } catch (RuntimeException e) {\n    System.out.println(\"ERROR\");  // this message is not shown\n  }\n}\n\npublic static void doSomethingWhichThrowsException() {\n  try {\n    throw new RuntimeException();\n  } finally {\n    for (int i = 0; i &lt; 10; i ++) {\n      //...\n      if (q == i) {\n        break; // ignored\n      }\n    }\n\n    /* ... */\n    return;      // Noncompliant - prevents the RuntimeException from being propagated\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic static void main(String[] args) {\n  try {\n    doSomethingWhichThrowsException();\n    System.out.println(\"OK\");\n  } catch (RuntimeException e) {\n    System.out.println(\"ERROR\");  // \"ERROR\" is printed as expected\n  }\n}\n\npublic static void doSomethingWhichThrowsException() {\n  try {\n    throw new RuntimeException();\n  } finally {\n    for (int i = 0; i &lt; 10; i ++) {\n      //...\n      if (q == i) {\n        break; // ignored\n      }\n    }\n\n    /* ... */\n  }\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/584.html\">MITRE, CWE-584</a> - Return Inside Finally Block\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/mIEbAQ\">CERT, ERR04-J.</a> - Do not complete abruptly from a finally block\n</li></ul>",
      "severity": "BLOCKER",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "cert",
        "cwe",
        "error-handling"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "30min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "30min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "30min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "30min",
      "remFnOverloaded": false,
      "type": "BUG"
    },
    {
      "key": "squid:S2230",
      "repo": "squid",
      "name": "Non-public methods should not be \"@Transactional\"",
      "createdAt": "2015-01-05T09:08:32+0100",
      "htmlDesc": "<p>Marking a non-public method <code>@Transactional</code> is both useless and misleading because Spring doesn't \"see\" non-<code>public</code> methods, and so makes no provision for their proper invocation. Nor does Spring make provision for the methods invoked by the method it called.</p>\n<p>Therefore marking a <code>private</code>  method, for instance, <code>@Transactional</code> can only result in a runtime error or exception if the method is actually written to be <code>@Transactional</code>.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Transactional  // Noncompliant\nprivate void doTheThing(ArgClass arg) {\n  // ...\n}\n</pre>",
      "mdDesc": "<p>Marking a non-public method <code>@Transactional</code> is both useless and misleading because Spring doesn't \"see\" non-<code>public</code> methods, and so makes no provision for their proper invocation. Nor does Spring make provision for the methods invoked by the method it called.</p>\n<p>Therefore marking a <code>private</code>  method, for instance, <code>@Transactional</code> can only result in a runtime error or exception if the method is actually written to be <code>@Transactional</code>.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Transactional  // Noncompliant\nprivate void doTheThing(ArgClass arg) {\n  // ...\n}\n</pre>",
      "severity": "CRITICAL",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "spring"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "20min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "20min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "20min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "20min",
      "remFnOverloaded": false,
      "type": "BUG"
    },
    {
      "key": "squid:S2110",
      "repo": "squid",
      "name": "Invalid \"Date\" values should not be used",
      "createdAt": "2015-03-03T16:25:18+0100",
      "htmlDesc": "<p>Whether the valid value ranges for <code>Date</code> fields start with 0 or 1 varies by field. For instance, month starts at 0, and day of month starts at 1. Enter a date value that goes past the end of the valid range, and the date will roll without error or exception. For instance, enter 12 for month, and you'll get January of the following year.</p>\n<p>This rule checks for bad values used in conjunction with <code>java.util.Date</code>, <code>java.sql.Date</code>, and <code>java.util.Calendar</code>. Specifically, values outside of the valid ranges:</p>\n<table>\n<tr><th>Field</th><th>Valid</th></tr>\n<tr><td>month</td><td>0-11</td></tr>\n<tr><td>date (day)</td><td>0-31</td></tr>\n<tr><td>hour</td><td>0-23</td></tr>\n<tr><td>minute</td><td>0-60</td></tr>\n<tr><td>second</td><td>0-61</td></tr>\n</table>\n<p>Note that this rule does not check for invalid leap years, leap seconds (second = 61), or invalid uses of the 31st day of the month.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nDate d = new Date();\nd.setDate(25);\nd.setYear(2014);\nd.setMonth(12);  // Noncompliant; rolls d into the next year\n\nCalendar c = new GregorianCalendar(2014, 12, 25);  // Noncompliant\nif (c.get(Calendar.MONTH) == 12) {  // Noncompliant; invalid comparison\n  // ...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nDate d = new Date();\nd.setDate(25);\nd.setYear(2014);\nd.setMonth(11);\n\nCalendar c = new Gregorian Calendar(2014, 11, 25);\nif (c.get(Calendar.MONTH) == 11) {\n  // ...\n}\n</pre>",
      "mdDesc": "<p>Whether the valid value ranges for <code>Date</code> fields start with 0 or 1 varies by field. For instance, month starts at 0, and day of month starts at 1. Enter a date value that goes past the end of the valid range, and the date will roll without error or exception. For instance, enter 12 for month, and you'll get January of the following year.</p>\n<p>This rule checks for bad values used in conjunction with <code>java.util.Date</code>, <code>java.sql.Date</code>, and <code>java.util.Calendar</code>. Specifically, values outside of the valid ranges:</p>\n<table>\n<tr><th>Field</th><th>Valid</th></tr>\n<tr><td>month</td><td>0-11</td></tr>\n<tr><td>date (day)</td><td>0-31</td></tr>\n<tr><td>hour</td><td>0-23</td></tr>\n<tr><td>minute</td><td>0-60</td></tr>\n<tr><td>second</td><td>0-61</td></tr>\n</table>\n<p>Note that this rule does not check for invalid leap years, leap seconds (second = 61), or invalid uses of the 31st day of the month.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nDate d = new Date();\nd.setDate(25);\nd.setYear(2014);\nd.setMonth(12);  // Noncompliant; rolls d into the next year\n\nCalendar c = new GregorianCalendar(2014, 12, 25);  // Noncompliant\nif (c.get(Calendar.MONTH) == 12) {  // Noncompliant; invalid comparison\n  // ...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nDate d = new Date();\nd.setDate(25);\nd.setYear(2014);\nd.setMonth(11);\n\nCalendar c = new Gregorian Calendar(2014, 11, 25);\nif (c.get(Calendar.MONTH) == 11) {\n  // ...\n}\n</pre>",
      "severity": "CRITICAL",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "5min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "5min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "5min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "5min",
      "remFnOverloaded": false,
      "type": "BUG"
    },
    {
      "key": "squid:S1141",
      "repo": "squid",
      "name": "Try-catch blocks should not be nested",
      "createdAt": "2013-08-30T17:20:57+0200",
      "htmlDesc": "<p>Nesting <code>try</code>/<code>catch</code> blocks severely impacts the readability of source code because it makes it too difficult to understand which block will catch which exception.</p>",
      "mdDesc": "<p>Nesting <code>try</code>/<code>catch</code> blocks severely impacts the readability of source code because it makes it too difficult to understand which block will catch which exception.</p>",
      "severity": "MAJOR",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "confusing"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "20min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "20min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "20min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "20min",
      "remFnOverloaded": false,
      "type": "CODE_SMELL"
    },
    {
      "key": "squid:S00107",
      "repo": "squid",
      "name": "Methods should not have too many parameters",
      "createdAt": "2013-06-19T09:21:15+0200",
      "htmlDesc": "<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many things.</p>\n\n<h2>Noncompliant Code Example</h2>\n<p>With a maximum number of 4 parameters:</p>\n<pre>\npublic void doSomething(int param1, int param2, int param3, String param4, long param5) {\n...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(int param1, int param2, int param3, String param4) {\n...\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>Methods annotated with Spring's <code>@RequestMapping</code> may have a lot of parameters, encapsulation being possible. Such methods are therefore ignored.</p>",
      "mdDesc": "<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many things.</p>\n\n<h2>Noncompliant Code Example</h2>\n<p>With a maximum number of 4 parameters:</p>\n<pre>\npublic void doSomething(int param1, int param2, int param3, String param4, long param5) {\n...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(int param1, int param2, int param3, String param4) {\n...\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>Methods annotated with Spring's <code>@RequestMapping</code> may have a lot of parameters, encapsulation being possible. Such methods are therefore ignored.</p>",
      "severity": "MAJOR",
      "status": "READY",
      "internalKey": "S107",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "brain-overload"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [
        {
          "key": "max",
          "htmlDesc": "Maximum authorized number of parameters",
          "defaultValue": "7",
          "type": "INTEGER"
        },
        {
          "key": "constructorMax",
          "htmlDesc": "Maximum authorized number of parameters for a constructor",
          "defaultValue": "7",
          "type": "INTEGER"
        }
      ],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "20min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "20min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "20min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "20min",
      "remFnOverloaded": false,
      "type": "CODE_SMELL"
    },
    {
      "key": "squid:S1948",
      "repo": "squid",
      "name": "Fields in a \"Serializable\" class should either be transient or serializable",
      "createdAt": "2014-10-10T17:54:02+0200",
      "htmlDesc": "<p>Fields in a <code>Serializable</code> class must themselves be either <code>Serializable</code> or <code>transient</code> even if the class is never explicitly serialized or deserialized. That's because under load, most J2EE application frameworks flush objects to disk, and an allegedly <code>Serializable</code> object with non-transient, non-serializable data members could cause program crashes, and open the door to attackers.</p>\n<p>This rule raises an issue on non-<code>Serializable</code> fields, and on collection fields when they are not <code>private</code> (because they could be assigned non-<code>Serializable</code> values externally), and when they are assigned non-<code>Serializable</code> types within the class.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Address {\n  //...\n}\n\npublic class Person implements Serializable {\n  private static final long serialVersionUID = 1905122041950251207L;\n\n  private String name;\n  private Address address;  // Noncompliant; Address isn't serializable\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>The alternative to making all members <code>serializable</code> or <code>transient</code> is to implement special methods which take on the responsibility of properly serializing and de-serializing the object. This rule ignores classes which implement the following methods:</p>\n<pre>\n private void writeObject(java.io.ObjectOutputStream out)\n     throws IOException\n private void readObject(java.io.ObjectInputStream in)\n     throws IOException, ClassNotFoundException;\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/594.html\">MITRE, CWE-594</a> - Saving Unserializable Objects to Disk\n</li><li> <a href=\"http://docs.oracle.com/javase/6/docs/api/java/io/Serializable.html\">Oracle Java 6, Serializable</a>\n</li><li> <a href=\"http://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html\">Oracle Java 7, Serializable</a>\n</li></ul>",
      "mdDesc": "<p>Fields in a <code>Serializable</code> class must themselves be either <code>Serializable</code> or <code>transient</code> even if the class is never explicitly serialized or deserialized. That's because under load, most J2EE application frameworks flush objects to disk, and an allegedly <code>Serializable</code> object with non-transient, non-serializable data members could cause program crashes, and open the door to attackers.</p>\n<p>This rule raises an issue on non-<code>Serializable</code> fields, and on collection fields when they are not <code>private</code> (because they could be assigned non-<code>Serializable</code> values externally), and when they are assigned non-<code>Serializable</code> types within the class.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Address {\n  //...\n}\n\npublic class Person implements Serializable {\n  private static final long serialVersionUID = 1905122041950251207L;\n\n  private String name;\n  private Address address;  // Noncompliant; Address isn't serializable\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>The alternative to making all members <code>serializable</code> or <code>transient</code> is to implement special methods which take on the responsibility of properly serializing and de-serializing the object. This rule ignores classes which implement the following methods:</p>\n<pre>\n private void writeObject(java.io.ObjectOutputStream out)\n     throws IOException\n private void readObject(java.io.ObjectInputStream in)\n     throws IOException, ClassNotFoundException;\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/594.html\">MITRE, CWE-594</a> - Saving Unserializable Objects to Disk\n</li><li> <a href=\"http://docs.oracle.com/javase/6/docs/api/java/io/Serializable.html\">Oracle Java 6, Serializable</a>\n</li><li> <a href=\"http://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html\">Oracle Java 7, Serializable</a>\n</li></ul>",
      "severity": "CRITICAL",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "cwe",
        "serialization"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "30min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "30min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "30min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "30min",
      "remFnOverloaded": false,
      "type": "BUG"
    },
    {
      "key": "squid:S2912",
      "repo": "squid",
      "name": "\"indexOf\" checks should use a start position",
      "createdAt": "2015-06-04T13:56:30+0200",
      "htmlDesc": "<p>One thing that makes good code good is the clarity with which it conveys the intent of the original programmer to maintainers, and the proper choice of <code>indexOf</code> methods can help move code from confusing to clear.</p>\n<p>If you need to see whether a substring is located beyond a certain point in a string, you can test the <code>indexOf</code> the substring versus the target point, or you can use the version of <code>indexOf</code> which takes a starting point argument. The latter is arguably clearer because the result is tested against -1, which is an easily recognizable \"not found\" indicator.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nString name = \"ismael\";\n\nif (name.indexOf(\"ae\") &gt; 2) { // Noncompliant\n  // ...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nString name = \"ismael\";\n\nif (name.indexOf(\"ae\", 2) &gt; -1) {\n  // ...\n}\n</pre>",
      "mdDesc": "<p>One thing that makes good code good is the clarity with which it conveys the intent of the original programmer to maintainers, and the proper choice of <code>indexOf</code> methods can help move code from confusing to clear.</p>\n<p>If you need to see whether a substring is located beyond a certain point in a string, you can test the <code>indexOf</code> the substring versus the target point, or you can use the version of <code>indexOf</code> which takes a starting point argument. The latter is arguably clearer because the result is tested against -1, which is an easily recognizable \"not found\" indicator.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nString name = \"ismael\";\n\nif (name.indexOf(\"ae\") &gt; 2) { // Noncompliant\n  // ...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nString name = \"ismael\";\n\nif (name.indexOf(\"ae\", 2) &gt; -1) {\n  // ...\n}\n</pre>",
      "severity": "MAJOR",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "confusing"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "5min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "5min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "5min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "5min",
      "remFnOverloaded": false,
      "type": "CODE_SMELL"
    },
    {
      "key": "squid:S1700",
      "repo": "squid",
      "name": "A field should not duplicate the name of its containing class",
      "createdAt": "2014-06-27T22:32:54+0200",
      "htmlDesc": "<p>It's confusing to have a class member with the same name (case differences aside) as its enclosing class. This is particularly so when you consider the common practice of naming a class instance for the class itself.</p>\n<p>Best practice dictates that any field or member with the same name as the enclosing class be renamed to be more descriptive of the particular aspect of the class it represents or holds.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo { \n  private String foo; \n\n  public String getFoo() { } \n} \n\nFoo foo = new Foo(); \nfoo.getFoo() // what does this return? \n</pre> \n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo {\n  private String name; \n\n  public String getName() { }\n}\n\n//...\n\nFoo foo = new Foo();\nfoo.getName()\n\n</pre>\n\n<h2>Exceptions</h2>\n<p>When the type of the field is the containing class and that field is static, no issue is raised to allow singletons named like the type. </p>\n<pre>\npublic class Foo {\n  ...\n  private static Foo foo;\n  public Foo getInstance() {\n    if(foo==null) {\n      foo = new Foo();\n    }\n    return foo;\n  }\n  ...\n}\n</pre>",
      "mdDesc": "<p>It's confusing to have a class member with the same name (case differences aside) as its enclosing class. This is particularly so when you consider the common practice of naming a class instance for the class itself.</p>\n<p>Best practice dictates that any field or member with the same name as the enclosing class be renamed to be more descriptive of the particular aspect of the class it represents or holds.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo { \n  private String foo; \n\n  public String getFoo() { } \n} \n\nFoo foo = new Foo(); \nfoo.getFoo() // what does this return? \n</pre> \n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo {\n  private String name; \n\n  public String getName() { }\n}\n\n//...\n\nFoo foo = new Foo();\nfoo.getName()\n\n</pre>\n\n<h2>Exceptions</h2>\n<p>When the type of the field is the containing class and that field is static, no issue is raised to allow singletons named like the type. </p>\n<pre>\npublic class Foo {\n  ...\n  private static Foo foo;\n  public Foo getInstance() {\n    if(foo==null) {\n      foo = new Foo();\n    }\n    return foo;\n  }\n  ...\n}\n</pre>",
      "severity": "MAJOR",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "brain-overload"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "10min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "10min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "10min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "10min",
      "remFnOverloaded": false,
      "type": "CODE_SMELL"
    },
    {
      "key": "squid:S2118",
      "repo": "squid",
      "name": "Non-serializable classes should not be written",
      "createdAt": "2015-02-17T07:18:47+0100",
      "htmlDesc": "<p>Nothing in a non-serializable class will be written out to file, and attempting to serialize such a class will result in an exception being thrown. Only a class that <code>implements Serializable</code> or one that extends such a class can successfully be serialized (or de-serialized). </p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Vegetable {  // neither implements Serializable nor extends a class that does\n  //...\n}\n\npublic class Menu {\n  public void meal() throws IOException {\n    Vegetable veg;\n    //...\n    FileOutputStream fout = new FileOutputStream(veg.getName());\n    ObjectOutputStream oos = new ObjectOutputStream(fout);\n    oos.writeObject(veg);  // Noncompliant. Nothing will be written\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Vegetable implements Serializable {  // can now be serialized\n  //...\n}\n\npublic class Menu {\n  public void meal() throws IOException {\n    Vegetable veg;\n    //...\n    FileOutputStream fout = new FileOutputStream(veg.getName());\n    ObjectOutputStream oos = new ObjectOutputStream(fout);\n    oos.writeObject(veg);\n  }\n}\n</pre>",
      "mdDesc": "<p>Nothing in a non-serializable class will be written out to file, and attempting to serialize such a class will result in an exception being thrown. Only a class that <code>implements Serializable</code> or one that extends such a class can successfully be serialized (or de-serialized). </p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Vegetable {  // neither implements Serializable nor extends a class that does\n  //...\n}\n\npublic class Menu {\n  public void meal() throws IOException {\n    Vegetable veg;\n    //...\n    FileOutputStream fout = new FileOutputStream(veg.getName());\n    ObjectOutputStream oos = new ObjectOutputStream(fout);\n    oos.writeObject(veg);  // Noncompliant. Nothing will be written\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Vegetable implements Serializable {  // can now be serialized\n  //...\n}\n\npublic class Menu {\n  public void meal() throws IOException {\n    Vegetable veg;\n    //...\n    FileOutputStream fout = new FileOutputStream(veg.getName());\n    ObjectOutputStream oos = new ObjectOutputStream(fout);\n    oos.writeObject(veg);\n  }\n}\n</pre>",
      "severity": "CRITICAL",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "serialization"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "15min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "15min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "15min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "15min",
      "remFnOverloaded": false,
      "type": "BUG"
    },
    {
      "key": "squid:S1149",
      "repo": "squid",
      "name": "Synchronized classes Vector, Hashtable, Stack and StringBuffer should not be used",
      "createdAt": "2013-08-30T17:20:57+0200",
      "htmlDesc": "<p>Early classes of the Java API, such as <code>Vector</code>, <code>Hashtable</code> and <code>StringBuffer</code>, were synchronized to make them thread-safe.</p>\n<p>Unfortunately, synchronization has a big negative impact on performance, even when using these collections from a single thread.</p>\n<p>It is better to use their new unsynchronized replacements:</p>\n<ul>\n<li> <code>ArrayList</code> or <code>LinkedList</code> instead of <code>Vector</code>\n</li><li> <code>Deque</code> instead of <code>Stack</code>\n</li><li> <code>HashMap</code> instead of <code>Hashtable</code>\n</li><li> <code>StringBuilder</code> instead of <code>StringBuffer</code>\n</li></ul>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nVector cats = new Vector(); \n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nArrayList cats = new ArrayList();\n</pre>\n\n<h2>Exceptions</h2>\n<p>Use of those synchronized classes is allowed in method signatures when overriding an existing method.</p>\n<pre>\n@Override\npublic Vector getCats() {...}\n</pre>",
      "mdDesc": "<p>Early classes of the Java API, such as <code>Vector</code>, <code>Hashtable</code> and <code>StringBuffer</code>, were synchronized to make them thread-safe.</p>\n<p>Unfortunately, synchronization has a big negative impact on performance, even when using these collections from a single thread.</p>\n<p>It is better to use their new unsynchronized replacements:</p>\n<ul>\n<li> <code>ArrayList</code> or <code>LinkedList</code> instead of <code>Vector</code>\n</li><li> <code>Deque</code> instead of <code>Stack</code>\n</li><li> <code>HashMap</code> instead of <code>Hashtable</code>\n</li><li> <code>StringBuilder</code> instead of <code>StringBuffer</code>\n</li></ul>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nVector cats = new Vector(); \n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nArrayList cats = new ArrayList();\n</pre>\n\n<h2>Exceptions</h2>\n<p>Use of those synchronized classes is allowed in method signatures when overriding an existing method.</p>\n<pre>\n@Override\npublic Vector getCats() {...}\n</pre>",
      "severity": "MAJOR",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "multi-threading",
        "performance"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "20min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "20min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "20min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "20min",
      "remFnOverloaded": false,
      "type": "CODE_SMELL"
    },
    {
      "key": "squid:S00112",
      "repo": "squid",
      "name": "Generic exceptions should never be thrown",
      "createdAt": "2013-06-19T09:21:15+0200",
      "htmlDesc": "<p>Using such generic exceptions as <code>Error</code>, <code>RuntimeException</code>, <code>Throwable</code>, and <code>Exception</code> prevents calling methods from handling true, system-generated exceptions differently than application-generated errors. </p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void foo(String bar) throws Throwable {  // Noncompliant\n  throw new RuntimeException(\"My Message\");     // Noncompliant\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic void foo(String bar) {\n  throw new MyOwnRuntimeException(\"My Message\"); \n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>Generic exceptions in the signatures of overriding methods are ignored.</p>\n<pre>\n@Override\npublic void myMethod() throws Exception {...}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/397.html\">MITRE, CWE-397</a> - Declaration of Throws for Generic Exception\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/BoB3AQ\">CERT, ERR07-J.</a> - Do not throw RuntimeException, Exception, or Throwable\n</li></ul>",
      "mdDesc": "<p>Using such generic exceptions as <code>Error</code>, <code>RuntimeException</code>, <code>Throwable</code>, and <code>Exception</code> prevents calling methods from handling true, system-generated exceptions differently than application-generated errors. </p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void foo(String bar) throws Throwable {  // Noncompliant\n  throw new RuntimeException(\"My Message\");     // Noncompliant\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic void foo(String bar) {\n  throw new MyOwnRuntimeException(\"My Message\"); \n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>Generic exceptions in the signatures of overriding methods are ignored.</p>\n<pre>\n@Override\npublic void myMethod() throws Exception {...}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/397.html\">MITRE, CWE-397</a> - Declaration of Throws for Generic Exception\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/BoB3AQ\">CERT, ERR07-J.</a> - Do not throw RuntimeException, Exception, or Throwable\n</li></ul>",
      "severity": "CRITICAL",
      "status": "READY",
      "internalKey": "S112",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "cert",
        "cwe",
        "error-handling"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "20min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "20min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "20min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "20min",
      "remFnOverloaded": false,
      "type": "VULNERABILITY"
    },
    {
      "key": "squid:S2445",
      "repo": "squid",
      "name": "Blocks should be synchronized on \"private final\" fields",
      "createdAt": "2015-03-03T16:25:18+0100",
      "htmlDesc": "<p>Synchronizing on a class field synchronizes not on the field itself, but on the object assigned to it. So synchronizing on a non-<code>final</code> field makes it possible for the field's value to change while a thread is in a block synchronized on the old value. That would allow a second thread, synchronized on the new value, to enter the block at the same time.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate String color = \"red\";\n\nprivate void doSomething(){\n  synchronized(color) {  // lock is actually on object instance \"red\" referred to by the color variable\n    //...\n    color = \"green\"; // Noncompliant; other threads now allowed into this block\n    // ...\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nprivate String color = \"red\";\nprivate final Object lockObj = new Object();\n\nprivate void doSomething(){\n  synchronized(lockObj) {\n    //...\n    color = \"green\";\n    // ...\n  }\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/412.html\">MITRE, CWE-412</a> - Unrestricted Externally Accessible Lock\n</li><li> <a href=\"http://cwe.mitre.org/data/definitions/413\">MITRE, CWE-413</a> - Improper Resource Locking\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/6IEzAg\">CERT, LCK00-J.</a> - Use private final lock objects to synchronize classes that may interact with untrusted code\n</li></ul>",
      "mdDesc": "<p>Synchronizing on a class field synchronizes not on the field itself, but on the object assigned to it. So synchronizing on a non-<code>final</code> field makes it possible for the field's value to change while a thread is in a block synchronized on the old value. That would allow a second thread, synchronized on the new value, to enter the block at the same time.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate String color = \"red\";\n\nprivate void doSomething(){\n  synchronized(color) {  // lock is actually on object instance \"red\" referred to by the color variable\n    //...\n    color = \"green\"; // Noncompliant; other threads now allowed into this block\n    // ...\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nprivate String color = \"red\";\nprivate final Object lockObj = new Object();\n\nprivate void doSomething(){\n  synchronized(lockObj) {\n    //...\n    color = \"green\";\n    // ...\n  }\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/412.html\">MITRE, CWE-412</a> - Unrestricted Externally Accessible Lock\n</li><li> <a href=\"http://cwe.mitre.org/data/definitions/413\">MITRE, CWE-413</a> - Improper Resource Locking\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/6IEzAg\">CERT, LCK00-J.</a> - Use private final lock objects to synchronize classes that may interact with untrusted code\n</li></ul>",
      "severity": "BLOCKER",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "cert",
        "cwe",
        "multi-threading"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "15min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "15min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "15min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "15min",
      "remFnOverloaded": false,
      "type": "VULNERABILITY"
    },
    {
      "key": "squid:S2204",
      "repo": "squid",
      "name": "\".equals()\" should not be used to test the values of \"Atomic\" classes",
      "createdAt": "2015-01-08T13:39:42+0100",
      "htmlDesc": "<p><code>AtomicInteger</code>, and <code>AtomicLong</code> extend <code>Number</code>, but they're distinct from <code>Integer</code> and <code>Long</code> and should be handled differently. <code>AtomicInteger</code> and <code>AtomicLong</code> are designed to support lock-free, thread-safe programming on single variables. As such, an <code>AtomicInteger</code> will only ever be \"equal\" to itself. Instead, you should <code>.get()</code> the value and make comparisons on it.</p>\n<p>This applies to all the atomic, seeming-primitive wrapper classes: <code>AtomicInteger</code>, <code>AtomicLong</code>, and <code>AtomicBoolean</code>.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nAtomicInteger aInt1 = new AtomicInteger(0);\nAtomicInteger aInt2 = new AtomicInteger(0);\n\nif (aInt1.equals(aInt2)) { ... }  // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nAtomicInteger aInt1 = new AtomicInteger(0);\nAtomicInteger aInt2 = new AtomicInteger(0);\n\nif (aInt1.get() == aInt2.get()) { ... }\n</pre>",
      "mdDesc": "<p><code>AtomicInteger</code>, and <code>AtomicLong</code> extend <code>Number</code>, but they're distinct from <code>Integer</code> and <code>Long</code> and should be handled differently. <code>AtomicInteger</code> and <code>AtomicLong</code> are designed to support lock-free, thread-safe programming on single variables. As such, an <code>AtomicInteger</code> will only ever be \"equal\" to itself. Instead, you should <code>.get()</code> the value and make comparisons on it.</p>\n<p>This applies to all the atomic, seeming-primitive wrapper classes: <code>AtomicInteger</code>, <code>AtomicLong</code>, and <code>AtomicBoolean</code>.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nAtomicInteger aInt1 = new AtomicInteger(0);\nAtomicInteger aInt2 = new AtomicInteger(0);\n\nif (aInt1.equals(aInt2)) { ... }  // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nAtomicInteger aInt1 = new AtomicInteger(0);\nAtomicInteger aInt2 = new AtomicInteger(0);\n\nif (aInt1.get() == aInt2.get()) { ... }\n</pre>",
      "severity": "BLOCKER",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "multi-threading"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "5min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "5min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "5min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "5min",
      "remFnOverloaded": false,
      "type": "BUG"
    },
    {
      "key": "squid:S1598",
      "repo": "squid",
      "name": "Package declaration should match source file directory",
      "createdAt": "2014-08-22T09:22:55+0200",
      "htmlDesc": "<p>By convention, a Java class' physical location (source directories) and its logical representation (packages) should be kept in sync. Thus a Java file located at \"src/org/sonarqube/Foo.java\" should have a package of \"org.sonarqube\". </p>\n<p>Unfortunately, this convention is not enforced by Java compilers, and nothing prevents a developer from making the \"Foo.java\" class part of the \"com.apple\" package, which could degrade the maintainability of both the class and its application.</p>",
      "mdDesc": "<p>By convention, a Java class' physical location (source directories) and its logical representation (packages) should be kept in sync. Thus a Java file located at \"src/org/sonarqube/Foo.java\" should have a package of \"org.sonarqube\". </p>\n<p>Unfortunately, this convention is not enforced by Java compilers, and nothing prevents a developer from making the \"Foo.java\" class part of the \"com.apple\" package, which could degrade the maintainability of both the class and its application.</p>",
      "severity": "MAJOR",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "pitfall"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "5min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "5min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "5min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "5min",
      "remFnOverloaded": false,
      "type": "CODE_SMELL"
    },
    {
      "key": "squid:S2201",
      "repo": "squid",
      "name": "Return values should not be ignored when function calls don't have any side effects",
      "createdAt": "2015-01-05T09:08:32+0100",
      "htmlDesc": "<p>When the call to a function doesn't have any side effects, what is the point of making the call if the results are ignored? In such case, either the function call is useless and should be dropped or the source code doesn't behave as expected. </p>\n<p>To prevent generating any false-positives, this rule triggers an issues only on the following predefined list of immutable classes in the Java API : String, Boolean, Integer, Double, Float, Byte, Character, Short, StackTraceElement.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void handle(String command){\n  command.toLowerCase(); // Noncompliant; result of method thrown away\n  ...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic void handle(String command){\n  String formattedCommand = command.toLowerCase();\n  ...\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> MISRA C:2012, 17.7 - The value returned by a function having non-void return type shall be used\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/9YIRAQ\">CERT, EXP12-C.</a> - Do not ignore values returned by functions\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/eoAyAQ\">CERT, EXP12-CPP.</a> - Do not ignore values returned by functions or methods\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/9gEqAQ\">CERT, EXP00-J.</a> - Do not ignore values returned by methods\n</li></ul>",
      "mdDesc": "<p>When the call to a function doesn't have any side effects, what is the point of making the call if the results are ignored? In such case, either the function call is useless and should be dropped or the source code doesn't behave as expected. </p>\n<p>To prevent generating any false-positives, this rule triggers an issues only on the following predefined list of immutable classes in the Java API : String, Boolean, Integer, Double, Float, Byte, Character, Short, StackTraceElement.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void handle(String command){\n  command.toLowerCase(); // Noncompliant; result of method thrown away\n  ...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic void handle(String command){\n  String formattedCommand = command.toLowerCase();\n  ...\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> MISRA C:2012, 17.7 - The value returned by a function having non-void return type shall be used\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/9YIRAQ\">CERT, EXP12-C.</a> - Do not ignore values returned by functions\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/eoAyAQ\">CERT, EXP12-CPP.</a> - Do not ignore values returned by functions or methods\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/9gEqAQ\">CERT, EXP00-J.</a> - Do not ignore values returned by methods\n</li></ul>",
      "severity": "CRITICAL",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "cert",
        "misra"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "10min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "10min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "10min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "10min",
      "remFnOverloaded": false,
      "type": "BUG"
    },
    {
      "key": "squid:S1596",
      "repo": "squid",
      "name": "Collections.emptyList(), emptyMap() and emptySet() should be used instead of Collections.EMPTY_LIST, EMPTY_MAP and EMPTY_SET",
      "createdAt": "2014-02-26T13:05:07+0100",
      "htmlDesc": "<p>Since the introduction of generics in Java 5, it is recommended to use generic types such as <code>List&lt;String&gt;</code> instead of raw ones such as just <code>List</code>. Assigning a raw type into a generic one is not type safe, and will generate a warning. The old <code>EMPTY_...</code> fields of the <code>Collections</code> class return raw types, whereas the newer <code>empty...()</code> methods return generic ones.</p>\n<p>Developers will also more easily find the <code>emptyIterator()</code> and <code>emptyListIterator()</code> methods for which there is no field equivalent if they are used to call the methods.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nList&lt;String&gt; collection1 = Collections.EMPTY_LIST;\nMap&lt;String, String&gt; collection2 = Collections.EMPTY_MAP;\nSet&lt;String&gt; collection3 = Collections.EMPTY_SET;\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nList&lt;String&gt; collection1 = Collections.emptyList();\nMap&lt;String, String&gt; collection2 = Collections.emptyMap();\nSet&lt;String&gt; collection3 = Collections.emptySet();\n</pre>",
      "mdDesc": "<p>Since the introduction of generics in Java 5, it is recommended to use generic types such as <code>List&lt;String&gt;</code> instead of raw ones such as just <code>List</code>. Assigning a raw type into a generic one is not type safe, and will generate a warning. The old <code>EMPTY_...</code> fields of the <code>Collections</code> class return raw types, whereas the newer <code>empty...()</code> methods return generic ones.</p>\n<p>Developers will also more easily find the <code>emptyIterator()</code> and <code>emptyListIterator()</code> methods for which there is no field equivalent if they are used to call the methods.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nList&lt;String&gt; collection1 = Collections.EMPTY_LIST;\nMap&lt;String, String&gt; collection2 = Collections.EMPTY_MAP;\nSet&lt;String&gt; collection3 = Collections.EMPTY_SET;\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nList&lt;String&gt; collection1 = Collections.emptyList();\nMap&lt;String, String&gt; collection2 = Collections.emptyMap();\nSet&lt;String&gt; collection3 = Collections.emptySet();\n</pre>",
      "severity": "MAJOR",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "obsolete",
        "pitfall"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "2min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "2min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "2min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "2min",
      "remFnOverloaded": false,
      "type": "CODE_SMELL"
    },
    {
      "key": "squid:S2441",
      "repo": "squid",
      "name": "Non-serializable objects should not be stored in \"HttpSession\" objects",
      "createdAt": "2015-03-03T16:25:18+0100",
      "htmlDesc": "<p>If you have no intention of writting an <code>HttpSession</code> object to file, then storing non-<code>serializable</code> objects in it may not seem like a big deal. But whether or not you explicitly serialize the session, it may be written to disk anyway, as the server manages its memory use in a process called \"passivation\". Further, some servers automatically write their active sessions out to file at shutdown &amp; deserialize any such sessions at startup.</p>\n<p>The point is, that even though <code>HttpSession</code> does not <code>extend Serializable</code>, you must nonetheless assume that it will be serialized, and </p>\n<p>understand that if you've stored non-serializable objects in the session, errors will result. </p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Address {\n  //...\n}\n\n//...\nHttpSession session = request.getSession();\nsession.setAttribute(\"address\", new Address());  // Noncompliant; Address isn't serializable\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/579.html\">MITRE, CWE-579</a> - J2EE Bad Practices: Non-serializable Object Stored in Session\n</li></ul>",
      "mdDesc": "<p>If you have no intention of writting an <code>HttpSession</code> object to file, then storing non-<code>serializable</code> objects in it may not seem like a big deal. But whether or not you explicitly serialize the session, it may be written to disk anyway, as the server manages its memory use in a process called \"passivation\". Further, some servers automatically write their active sessions out to file at shutdown &amp; deserialize any such sessions at startup.</p>\n<p>The point is, that even though <code>HttpSession</code> does not <code>extend Serializable</code>, you must nonetheless assume that it will be serialized, and </p>\n<p>understand that if you've stored non-serializable objects in the session, errors will result. </p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Address {\n  //...\n}\n\n//...\nHttpSession session = request.getSession();\nsession.setAttribute(\"address\", new Address());  // Noncompliant; Address isn't serializable\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/579.html\">MITRE, CWE-579</a> - J2EE Bad Practices: Non-serializable Object Stored in Session\n</li></ul>",
      "severity": "CRITICAL",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "cwe"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "20min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "20min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "20min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "20min",
      "remFnOverloaded": false,
      "type": "BUG"
    },
    {
      "key": "squid:S2442",
      "repo": "squid",
      "name": "\"Lock\" objects should not be \"synchronized\"",
      "createdAt": "2015-03-03T16:25:18+0100",
      "htmlDesc": "<p><code>java.util.concurrent.locks.Lock</code> offers far more powerful and flexible locking operations than are available with <code>synchronized</code> blocks. So synchronizing on a <code>Lock</code> throws away the power of the object, and is just silly. Instead, such objects should be locked and unlocked using <code>tryLock()</code> and <code>unlock()</code>.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nLock lock = new MyLockImpl();\nsynchronized(lock) {  // Noncompliant\n  //...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nLock lock = new MyLockImpl();\nlock.tryLock();\n//...\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"https://www.securecoding.cert.org/confluence/x/cQCaAg\">CERT, LCK03-J.</a> - Do not synchronize on the intrinsic locks of high-level concurrency objects\n</li></ul>",
      "mdDesc": "<p><code>java.util.concurrent.locks.Lock</code> offers far more powerful and flexible locking operations than are available with <code>synchronized</code> blocks. So synchronizing on a <code>Lock</code> throws away the power of the object, and is just silly. Instead, such objects should be locked and unlocked using <code>tryLock()</code> and <code>unlock()</code>.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nLock lock = new MyLockImpl();\nsynchronized(lock) {  // Noncompliant\n  //...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nLock lock = new MyLockImpl();\nlock.tryLock();\n//...\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"https://www.securecoding.cert.org/confluence/x/cQCaAg\">CERT, LCK03-J.</a> - Do not synchronize on the intrinsic locks of high-level concurrency objects\n</li></ul>",
      "severity": "MAJOR",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "cert",
        "clumsy",
        "multi-threading"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "15min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "15min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "15min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "15min",
      "remFnOverloaded": false,
      "type": "CODE_SMELL"
    },
    {
      "key": "squid:S2200",
      "repo": "squid",
      "name": "\"compareTo\" results should not be checked for specific values",
      "createdAt": "2015-01-05T09:08:32+0100",
      "htmlDesc": "<p>While most <code>compareTo</code> methods return -1, 0, or 1, some do not, and testing the result of a <code>compareTo</code> against a specific value other than 0 could result in false negatives.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (myClass.compareTo(arg) == -1) {  // Noncompliant\n  // ...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (myClass.compareTo(arg) &lt; 0) {\n  // ...\n}\n</pre>",
      "mdDesc": "<p>While most <code>compareTo</code> methods return -1, 0, or 1, some do not, and testing the result of a <code>compareTo</code> against a specific value other than 0 could result in false negatives.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (myClass.compareTo(arg) == -1) {  // Noncompliant\n  // ...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (myClass.compareTo(arg) &lt; 0) {\n  // ...\n}\n</pre>",
      "severity": "MAJOR",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "unpredictable"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "5min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "5min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "5min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "5min",
      "remFnOverloaded": false,
      "type": "CODE_SMELL"
    },
    {
      "key": "squid:S2681",
      "repo": "squid",
      "name": "Multiline blocks should be enclosed in curly braces",
      "createdAt": "2015-06-04T13:56:30+0200",
      "htmlDesc": "<p>Curly braces can be omitted from a one-line block, such as with an <code>if</code> statement or <code>for</code> loop, but doing so can be misleading and induce bugs. </p>\n<p>This rule raises an issue when the indentation of the lines after a one-line block indicates an intent to include those lines in the block, but the omission of curly braces means the lines will be unconditionally executed once.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition)\n  firstActionInBlock();\n  secondAction();  // Noncompliant; executed unconditionally\nthirdAction();\n\nString str = null;\nfor (int i = 0; i &lt; array.length; i++) \n  str = array[i];\n  doTheThing(str);  // Noncompliant; executed only on last array element\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (condition) {\n  firstActionInBlock();\n  secondAction();\n}\nthirdAction();\n\nString str = null;\nfor (int i = 0; i &lt; array.length; i++) {\n  str = array[i];\n  doTheThing(str);\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/483.html\">MITRE, CWE-483</a> - Incorrect Block Delimitation\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/3wHEAw\">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement\n</li></ul>",
      "mdDesc": "<p>Curly braces can be omitted from a one-line block, such as with an <code>if</code> statement or <code>for</code> loop, but doing so can be misleading and induce bugs. </p>\n<p>This rule raises an issue when the indentation of the lines after a one-line block indicates an intent to include those lines in the block, but the omission of curly braces means the lines will be unconditionally executed once.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition)\n  firstActionInBlock();\n  secondAction();  // Noncompliant; executed unconditionally\nthirdAction();\n\nString str = null;\nfor (int i = 0; i &lt; array.length; i++) \n  str = array[i];\n  doTheThing(str);  // Noncompliant; executed only on last array element\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (condition) {\n  firstActionInBlock();\n  secondAction();\n}\nthirdAction();\n\nString str = null;\nfor (int i = 0; i &lt; array.length; i++) {\n  str = array[i];\n  doTheThing(str);\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/483.html\">MITRE, CWE-483</a> - Incorrect Block Delimitation\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/3wHEAw\">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement\n</li></ul>",
      "severity": "CRITICAL",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "cert",
        "cwe"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "5min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "5min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "5min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "5min",
      "remFnOverloaded": false,
      "type": "BUG"
    },
    {
      "key": "squid:S2440",
      "repo": "squid",
      "name": "Classes with only \"static\" methods should not be instantiated",
      "createdAt": "2015-03-03T16:25:18+0100",
      "htmlDesc": "<p><code>static</code> methods can be accessed without an instance of the enclosing class, so there's no reason to instantiate a class that has only <code>static</code> methods.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class TextUtils {\n  public static String stripHtml(String source) {\n    return source.replaceAll(\"&lt;[^&gt;]+&gt;\", \"\");\n  }\n}\n\npublic class TextManipulator {\n\n  // ...\n\n  public void cleanText(String source) {\n    TextUtils textUtils = new TextUtils(); // Noncompliant\n\n    String stripped = textUtils.stripHtml(source);\n\n    //...\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class TextUtils {\n  public static String stripHtml(String source) {\n    return source.replaceAll(\"&lt;[^&gt;]+&gt;\", \"\");\n  }\n}\n\npublic class TextManipulator {\n\n  // ...\n\n  public void cleanText(String source) {\n    String stripped = TextUtils.stripHtml(source);\n\n    //...\n  }\n}\n</pre>\n\n<h2>See Also</h2>\n<ul>\n<li> <a href='/coding_rules#rule_key=squid%3AS1118'>S1118</a> - Utility classes should not have public constructors\n</li></ul>",
      "mdDesc": "<p><code>static</code> methods can be accessed without an instance of the enclosing class, so there's no reason to instantiate a class that has only <code>static</code> methods.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class TextUtils {\n  public static String stripHtml(String source) {\n    return source.replaceAll(\"&lt;[^&gt;]+&gt;\", \"\");\n  }\n}\n\npublic class TextManipulator {\n\n  // ...\n\n  public void cleanText(String source) {\n    TextUtils textUtils = new TextUtils(); // Noncompliant\n\n    String stripped = textUtils.stripHtml(source);\n\n    //...\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class TextUtils {\n  public static String stripHtml(String source) {\n    return source.replaceAll(\"&lt;[^&gt;]+&gt;\", \"\");\n  }\n}\n\npublic class TextManipulator {\n\n  // ...\n\n  public void cleanText(String source) {\n    String stripped = TextUtils.stripHtml(source);\n\n    //...\n  }\n}\n</pre>\n\n<h2>See Also</h2>\n<ul>\n<li> {rule:squid:S1118} - Utility classes should not have public constructors\n</li></ul>",
      "severity": "MAJOR",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "clumsy"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "2min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "2min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "2min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "2min",
      "remFnOverloaded": false,
      "type": "CODE_SMELL"
    },
    {
      "key": "squid:S2209",
      "repo": "squid",
      "name": "\"static\" members should be accessed statically",
      "createdAt": "2015-06-04T13:56:30+0200",
      "htmlDesc": "<p>While it is <em>possible</em> to access <code>static</code> members from a class instance, it's bad form, and considered by most to be misleading because it implies to the readers of your code that there's an instance of the member per class instance.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class A {\n  public static int counter = 0;\n}\n\npublic class B { \n  private A first = new A();\n  private A second = new A();\n\n  public void runUpTheCount() {\n    first.counter ++;  // Noncompliant\n    second.counter ++;  // Noncompliant. A.counter is now 2, which is perhaps contrary to expectations\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class A {\n  public static int counter = 0;\n}\n\npublic class B { \n  private A first = new A();\n  private A second = new A();\n\n  public void runUpTheCount() {\n    A.counter ++;  // Compliant\n    A.counter ++;  // Compliant\n  }\n}\n</pre>",
      "mdDesc": "<p>While it is <em>possible</em> to access <code>static</code> members from a class instance, it's bad form, and considered by most to be misleading because it implies to the readers of your code that there's an instance of the member per class instance.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class A {\n  public static int counter = 0;\n}\n\npublic class B { \n  private A first = new A();\n  private A second = new A();\n\n  public void runUpTheCount() {\n    first.counter ++;  // Noncompliant\n    second.counter ++;  // Noncompliant. A.counter is now 2, which is perhaps contrary to expectations\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class A {\n  public static int counter = 0;\n}\n\npublic class B { \n  private A first = new A();\n  private A second = new A();\n\n  public void runUpTheCount() {\n    A.counter ++;  // Compliant\n    A.counter ++;  // Compliant\n  }\n}\n</pre>",
      "severity": "MAJOR",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "pitfall"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "5min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "5min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "5min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "5min",
      "remFnOverloaded": false,
      "type": "CODE_SMELL"
    },
    {
      "key": "squid:S1118",
      "repo": "squid",
      "name": "Utility classes should not have public constructors",
      "createdAt": "2013-08-30T17:20:57+0200",
      "htmlDesc": "<p>Utility classes, which are a collection of static members, are not meant to be instantiated.</p>\n<p>Even abstract utility classes, which can be extended, should not have public constructors.</p>\n<p>Java adds an implicit public constructor to every class which does not define at least one explicitly.</p>\n<p>Hence, at least one non-public constructor should be defined.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass StringUtils { // Noncompliant\n\n  public static String concatenate(String s1, String s2) {\n    return s1 + s2;\n  }\n\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nclass StringUtils { // Compliant\n\n  private StringUtils() {\n    throw new IllegalAccessError(\"Utility class\");\n  }\n\n  public static String concatenate(String s1, String s2) {\n    return s1 + s2;\n  }\n\n}\n</pre>",
      "mdDesc": "<p>Utility classes, which are a collection of static members, are not meant to be instantiated.</p>\n<p>Even abstract utility classes, which can be extended, should not have public constructors.</p>\n<p>Java adds an implicit public constructor to every class which does not define at least one explicitly.</p>\n<p>Hence, at least one non-public constructor should be defined.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass StringUtils { // Noncompliant\n\n  public static String concatenate(String s1, String s2) {\n    return s1 + s2;\n  }\n\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nclass StringUtils { // Compliant\n\n  private StringUtils() {\n    throw new IllegalAccessError(\"Utility class\");\n  }\n\n  public static String concatenate(String s1, String s2) {\n    return s1 + s2;\n  }\n\n}\n</pre>",
      "severity": "MAJOR",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "design"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "30min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "30min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "30min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "30min",
      "remFnOverloaded": false,
      "type": "CODE_SMELL"
    },
    {
      "key": "squid:S2447",
      "repo": "squid",
      "name": "Null should not be returned from a \"Boolean\" method",
      "createdAt": "2015-03-03T16:25:18+0100",
      "htmlDesc": "<p>While <code>null</code> is technically a valid <code>Boolean</code> value, that fact, and the distinction between <code>Boolean</code> and <code>boolean</code> is easy to forget. So returning <code>null</code> from a <code>Boolean</code> method is likely to cause problems with callers' code.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic Boolean isUsable() {\n  // ...\n  return null;  // Noncompliant\n}\n</pre>",
      "mdDesc": "<p>While <code>null</code> is technically a valid <code>Boolean</code> value, that fact, and the distinction between <code>Boolean</code> and <code>boolean</code> is easy to forget. So returning <code>null</code> from a <code>Boolean</code> method is likely to cause problems with callers' code.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic Boolean isUsable() {\n  // ...\n  return null;  // Noncompliant\n}\n</pre>",
      "severity": "MAJOR",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "pitfall"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "20min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "20min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "20min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "20min",
      "remFnOverloaded": false,
      "type": "CODE_SMELL"
    },
    {
      "key": "squid:S2326",
      "repo": "squid",
      "name": "Unused type parameters should be removed",
      "createdAt": "2015-02-17T07:18:47+0100",
      "htmlDesc": "<p>Type parameters that aren't used are dead code, which can only distract and possibly confuse developers during maintenance. Therefore, unused type parameters should be removed.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nint &lt;T&gt; Add(int a, int b) // Noncompliant; &lt;T&gt; is ignored\n{\n  return a + b; \n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nint Add(int a, int b)\n{\n  return a + b; \n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect\n</li></ul>",
      "mdDesc": "<p>Type parameters that aren't used are dead code, which can only distract and possibly confuse developers during maintenance. Therefore, unused type parameters should be removed.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nint &lt;T&gt; Add(int a, int b) // Noncompliant; &lt;T&gt; is ignored\n{\n  return a + b; \n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nint Add(int a, int b)\n{\n  return a + b; \n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect\n</li></ul>",
      "severity": "MAJOR",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "cert",
        "unused"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "5min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "5min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "5min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "5min",
      "remFnOverloaded": false,
      "type": "CODE_SMELL"
    },
    {
      "key": "squid:S1479",
      "repo": "squid",
      "name": "\"switch\" statements should not have too many \"case\" clauses",
      "createdAt": "2014-10-10T17:54:03+0200",
      "htmlDesc": "<p>When <code>switch</code> statements have a large set of <code>case</code> clauses, it is usually an attempt to map two sets of data. A real map structure would be more readable and maintainable, and should be used instead.</p>",
      "mdDesc": "<p>When <code>switch</code> statements have a large set of <code>case</code> clauses, it is usually an attempt to map two sets of data. A real map structure would be more readable and maintainable, and should be used instead.</p>",
      "severity": "MAJOR",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "brain-overload"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [
        {
          "key": "maximum",
          "htmlDesc": "Maximum number of case",
          "defaultValue": "30",
          "type": "INTEGER"
        }
      ],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "30min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "30min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "30min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "30min",
      "remFnOverloaded": false,
      "type": "CODE_SMELL"
    },
    {
      "key": "squid:UselessImportCheck",
      "repo": "squid",
      "name": "Useless imports should be removed",
      "createdAt": "2013-08-30T17:20:57+0200",
      "htmlDesc": "<p>The imports part of a file should be handled by the Integrated Development Environment (IDE), not manually by the developer.</p>\n<p>Unused and useless imports should not occur if that is the case.</p>\n<p>Leaving them in reduces the code's readability, since their presence can be confusing.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npackage my.company;\n\nimport java.lang.String;        // Noncompliant; java.lang classes are always implicitly imported\nimport my.company.SomeClass;    // Noncompliant; same-package files are always implicitly imported\nimport java.io.File;            // Noncompliant; File is not used\n\nimport my.company2.SomeType;\nimport my.company2.SomeType;    // Noncompliant; 'SomeType' is already imported\n\nclass ExampleClass {\n\n  public String someString;\n  public SomeType something;\n\n}\n</pre>",
      "mdDesc": "<p>The imports part of a file should be handled by the Integrated Development Environment (IDE), not manually by the developer.</p>\n<p>Unused and useless imports should not occur if that is the case.</p>\n<p>Leaving them in reduces the code's readability, since their presence can be confusing.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npackage my.company;\n\nimport java.lang.String;        // Noncompliant; java.lang classes are always implicitly imported\nimport my.company.SomeClass;    // Noncompliant; same-package files are always implicitly imported\nimport java.io.File;            // Noncompliant; File is not used\n\nimport my.company2.SomeType;\nimport my.company2.SomeType;    // Noncompliant; 'SomeType' is already imported\n\nclass ExampleClass {\n\n  public String someString;\n  public SomeType something;\n\n}\n</pre>",
      "severity": "MINOR",
      "status": "READY",
      "internalKey": "S1128",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "unused"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "2min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "2min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "2min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "2min",
      "remFnOverloaded": false,
      "type": "CODE_SMELL"
    },
    {
      "key": "squid:S1905",
      "repo": "squid",
      "name": "Redundant casts should not be used",
      "createdAt": "2014-11-19T08:29:01+0100",
      "htmlDesc": "<p>Unnecessary casting expressions make the code harder to read and understand.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void example() {\n  for (Foo obj : (List&lt;Foo&gt;) getFoos()) {  // Noncompliant; cast unnecessary because List&lt;Foo&gt; is what's returned\n    //...\n  }\n}\n\npublic List&lt;Foo&gt; getFoos() {\n  return this.foos;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic void example() {\n  for (Foo obj : getFoos()) {\n    //...\n  }\n}\n\npublic List&lt;Foo&gt; getFoos() {\n  return this.foos;\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>Casting may be required to distinguish the method to call in the case of overloading:</p>\n<pre>\nclass A {}\nclass B extends A{}\nclass C {\n  void fun(A a){}\n  void fun(B b){}\n  \n  void foo() {\n    B b = new B();\n    fun(b);\n    fun((A) b); //call the first method so cast is not redundant.\n  }\n\n}\n</pre>",
      "mdDesc": "<p>Unnecessary casting expressions make the code harder to read and understand.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void example() {\n  for (Foo obj : (List&lt;Foo&gt;) getFoos()) {  // Noncompliant; cast unnecessary because List&lt;Foo&gt; is what's returned\n    //...\n  }\n}\n\npublic List&lt;Foo&gt; getFoos() {\n  return this.foos;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic void example() {\n  for (Foo obj : getFoos()) {\n    //...\n  }\n}\n\npublic List&lt;Foo&gt; getFoos() {\n  return this.foos;\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>Casting may be required to distinguish the method to call in the case of overloading:</p>\n<pre>\nclass A {}\nclass B extends A{}\nclass C {\n  void fun(A a){}\n  void fun(B b){}\n  \n  void foo() {\n    B b = new B();\n    fun(b);\n    fun((A) b); //call the first method so cast is not redundant.\n  }\n\n}\n</pre>",
      "severity": "MINOR",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "clumsy"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "5min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "5min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "5min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "5min",
      "remFnOverloaded": false,
      "type": "CODE_SMELL"
    },
    {
      "key": "squid:UnusedPrivateMethod",
      "repo": "squid",
      "name": "Unused \"private\" methods should be removed",
      "createdAt": "2013-06-19T07:34:52+0200",
      "htmlDesc": "<p><code>private</code> methods that are never executed are dead code: unnecessary, inoperative code that should be removed. Cleaning out dead code decreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from being introduced.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo implements Serializable\n{\n  private Foo(){}     //Compliant, private empty constructor intentionally used to prevent any direct instantiation of a class.\n  public static void doSomething(){\n    Foo foo = new Foo();\n    ...\n  }\n  private void unusedPrivateMethod(){...}\n  private void writeObject(ObjectOutputStream s){...}  //Compliant, relates to the java serialization mechanism\n  private void readObject(ObjectInputStream in){...}  //Compliant, relates to the java serialization mechanism\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo implements Serializable\n{\n  private Foo(){}     //Compliant, private empty constructor intentionally used to prevent any direct instantiation of a class.\n  public static void doSomething(){\n    Foo foo = new Foo();\n    ...\n  }\n\n  private void writeObject(ObjectOutputStream s){...}  //Compliant, relates to the java serialization mechanism\n\n  private void readObject(ObjectInputStream in){...}  //Compliant, relates to the java serialization mechanism\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>This rule doesn't raise any issue on annotated methods.</p>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"https://www.securecoding.cert.org/confluence/x/OYIyAQ\">CERT, MSC07-CPP.</a> - Detect and remove dead code\n</li></ul>",
      "mdDesc": "<p><code>private</code> methods that are never executed are dead code: unnecessary, inoperative code that should be removed. Cleaning out dead code decreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from being introduced.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo implements Serializable\n{\n  private Foo(){}     //Compliant, private empty constructor intentionally used to prevent any direct instantiation of a class.\n  public static void doSomething(){\n    Foo foo = new Foo();\n    ...\n  }\n  private void unusedPrivateMethod(){...}\n  private void writeObject(ObjectOutputStream s){...}  //Compliant, relates to the java serialization mechanism\n  private void readObject(ObjectInputStream in){...}  //Compliant, relates to the java serialization mechanism\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo implements Serializable\n{\n  private Foo(){}     //Compliant, private empty constructor intentionally used to prevent any direct instantiation of a class.\n  public static void doSomething(){\n    Foo foo = new Foo();\n    ...\n  }\n\n  private void writeObject(ObjectOutputStream s){...}  //Compliant, relates to the java serialization mechanism\n\n  private void readObject(ObjectInputStream in){...}  //Compliant, relates to the java serialization mechanism\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>This rule doesn't raise any issue on annotated methods.</p>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"https://www.securecoding.cert.org/confluence/x/OYIyAQ\">CERT, MSC07-CPP.</a> - Detect and remove dead code\n</li></ul>",
      "severity": "MAJOR",
      "status": "READY",
      "internalKey": "S1144",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "cert",
        "unused"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "5min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "5min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "5min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "5min",
      "remFnOverloaded": false,
      "type": "CODE_SMELL"
    },
    {
      "key": "squid:UselessParenthesesCheck",
      "repo": "squid",
      "name": "Useless parentheses around expressions should be removed to prevent any misunderstanding",
      "createdAt": "2013-08-30T17:20:57+0200",
      "htmlDesc": "<p>Useless parentheses can sometimes be misleading and so should be removed. </p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nreturn 3;\nreturn (x);           // Noncompliant\nreturn (x + 1);       // Noncompliant\nint x = (y / 2 + 1);  // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nreturn 3;\nreturn x;\nreturn x + 1;\nint x = y / 2 + 1;\n</pre>",
      "mdDesc": "<p>Useless parentheses can sometimes be misleading and so should be removed. </p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nreturn 3;\nreturn (x);           // Noncompliant\nreturn (x + 1);       // Noncompliant\nint x = (y / 2 + 1);  // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nreturn 3;\nreturn x;\nreturn x + 1;\nint x = y / 2 + 1;\n</pre>",
      "severity": "MAJOR",
      "status": "READY",
      "internalKey": "S1110",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "confusing"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "1min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "1min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "1min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "1min",
      "remFnOverloaded": false,
      "type": "CODE_SMELL"
    },
    {
      "key": "squid:S1126",
      "repo": "squid",
      "name": "Return of boolean expressions should not be wrapped into an \"if-then-else\" statement",
      "createdAt": "2013-08-30T17:20:57+0200",
      "htmlDesc": "<p>Return of boolean literal statements wrapped into <code>if-then-else</code> ones should be simplified.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (expression) {  \n  return true;\n} else {\n  return false;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nreturn expression; \n</pre>",
      "mdDesc": "<p>Return of boolean literal statements wrapped into <code>if-then-else</code> ones should be simplified.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (expression) {  \n  return true;\n} else {\n  return false;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nreturn expression; \n</pre>",
      "severity": "MINOR",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "clumsy"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "2min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "2min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "2min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "2min",
      "remFnOverloaded": false,
      "type": "CODE_SMELL"
    },
    {
      "key": "squid:S1488",
      "repo": "squid",
      "name": "Local Variables should not be declared and then immediately returned or thrown",
      "createdAt": "2014-02-26T13:05:07+0100",
      "htmlDesc": "<p>Declaring a variable only to immediately return or throw it is a bad practice.</p>\n<p>Some developers argue that the practice improves code readability, because it enables them to explicitly name what is being returned. However, this variable is an internal implementation detail that is not exposed to the callers of the method. The method name should be sufficient for callers to know exactly what will be returned.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic long computeDurationInMilliseconds() {\n  long duration = (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;\n  return duration;\n}\n\npublic void doSomething() {\n  RuntimeException myException = new RuntimeException();\n  throw myException;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic long computeDurationInMilliseconds() {\n  return (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;\n}\n\npublic void doSomething() {\n  throw new RuntimeException();\n}\n</pre>",
      "mdDesc": "<p>Declaring a variable only to immediately return or throw it is a bad practice.</p>\n<p>Some developers argue that the practice improves code readability, because it enables them to explicitly name what is being returned. However, this variable is an internal implementation detail that is not exposed to the callers of the method. The method name should be sufficient for callers to know exactly what will be returned.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic long computeDurationInMilliseconds() {\n  long duration = (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;\n  return duration;\n}\n\npublic void doSomething() {\n  RuntimeException myException = new RuntimeException();\n  throw myException;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic long computeDurationInMilliseconds() {\n  return (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;\n}\n\npublic void doSomething() {\n  throw new RuntimeException();\n}\n</pre>",
      "severity": "MINOR",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "clumsy"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "2min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "2min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "2min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "2min",
      "remFnOverloaded": false,
      "type": "CODE_SMELL"
    },
    {
      "key": "squid:S1125",
      "repo": "squid",
      "name": "Boolean literals should not be redundant",
      "createdAt": "2013-08-30T17:20:57+0200",
      "htmlDesc": "<p>Redundant Boolean literals should be removed from expressions to improve readability.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (booleanMethod() == true) { /* ... */ }\nif (booleanMethod() == false) { /* ... */ }\nif (booleanMethod() || false) { /* ... */ }\ndoSomething(!false);\ndoSomething(booleanMethod() == true);\n\nbooleanVariable = booleanMethod() ? true : false;\nbooleanVariable = booleanMethod() ? true : exp;\nbooleanVariable = booleanMethod() ? false : exp;\nbooleanVariable = booleanMethod() ? exp : true;\nbooleanVariable = booleanMethod() ? exp : false;\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (booleanMethod()) { /* ... */ }        \nif (!booleanMethod()) { /* ... */ }\nif (booleanMethod()) { /* ... */ }\ndoSomething(true);\ndoSomething(booleanMethod());\n\nbooleanVariable = booleanMethod();\nbooleanVariable = booleanMethod() || exp;\nbooleanVariable = !booleanMethod() &amp;&amp; exp;\nbooleanVariable = !booleanMethod() || exp;\nbooleanVariable = booleanMethod() &amp;&amp; exp;\n</pre>",
      "mdDesc": "<p>Redundant Boolean literals should be removed from expressions to improve readability.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (booleanMethod() == true) { /* ... */ }\nif (booleanMethod() == false) { /* ... */ }\nif (booleanMethod() || false) { /* ... */ }\ndoSomething(!false);\ndoSomething(booleanMethod() == true);\n\nbooleanVariable = booleanMethod() ? true : false;\nbooleanVariable = booleanMethod() ? true : exp;\nbooleanVariable = booleanMethod() ? false : exp;\nbooleanVariable = booleanMethod() ? exp : true;\nbooleanVariable = booleanMethod() ? exp : false;\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (booleanMethod()) { /* ... */ }        \nif (!booleanMethod()) { /* ... */ }\nif (booleanMethod()) { /* ... */ }\ndoSomething(true);\ndoSomething(booleanMethod());\n\nbooleanVariable = booleanMethod();\nbooleanVariable = booleanMethod() || exp;\nbooleanVariable = !booleanMethod() &amp;&amp; exp;\nbooleanVariable = !booleanMethod() || exp;\nbooleanVariable = booleanMethod() &amp;&amp; exp;\n</pre>",
      "severity": "MINOR",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "clumsy"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "2min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "2min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "2min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "2min",
      "remFnOverloaded": false,
      "type": "CODE_SMELL"
    },
    {
      "key": "squid:S3422",
      "repo": "squid",
      "name": "Dependencies should not have \"system\" scope",
      "createdAt": "2015-12-18T09:14:55+0100",
      "htmlDesc": "<p><code>system</code> dependencies are sought at a specific, specified path. This drastically reduces portability because if you deploy your artifact in an environment that's not configured just like yours is, your code won't work. </p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;dependency&gt;\n  &lt;groupId&gt;javax.sql&lt;/groupId&gt;\n  &lt;artifactId&gt;jdbc-stdext&lt;/artifactId&gt;\n  &lt;version&gt;2.0&lt;/version&gt;\n  &lt;scope&gt;system&lt;/scope&gt;  &lt;!-- Noncompliant --&gt;\n  &lt;systemPath&gt;/usr/bin/lib/rt.jar&lt;/systemPath&gt;  &lt;!-- remove this --&gt;\n&lt;/dependency&gt;\n</pre>",
      "mdDesc": "<p><code>system</code> dependencies are sought at a specific, specified path. This drastically reduces portability because if you deploy your artifact in an environment that's not configured just like yours is, your code won't work. </p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;dependency&gt;\n  &lt;groupId&gt;javax.sql&lt;/groupId&gt;\n  &lt;artifactId&gt;jdbc-stdext&lt;/artifactId&gt;\n  &lt;version&gt;2.0&lt;/version&gt;\n  &lt;scope&gt;system&lt;/scope&gt;  &lt;!-- Noncompliant --&gt;\n  &lt;systemPath&gt;/usr/bin/lib/rt.jar&lt;/systemPath&gt;  &lt;!-- remove this --&gt;\n&lt;/dependency&gt;\n</pre>",
      "severity": "MAJOR",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "lock-in",
        "maven"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "5min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "5min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "5min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "5min",
      "remFnOverloaded": false,
      "type": "CODE_SMELL"
    },
    {
      "key": "squid:S2696",
      "repo": "squid",
      "name": "Instance methods should not write to \"static\" fields",
      "createdAt": "2015-04-01T10:22:45+0200",
      "htmlDesc": "<p>Correctly updating a <code>static</code> field from a non-static method is tricky to get right and could easily lead to bugs if there are multiple class instances  and/or multiple threads in play. Ideally, <code>static</code> fields are only updated from <code>synchronized static</code> methods.</p>\n<p>This rule raises an issue each time a <code>static</code> field is updated from a non-static method.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  private static int count = 0;\n\n  public void doSomething() {\n    //...\n    count++;  // Noncompliant\n  }\n}\n</pre>",
      "mdDesc": "<p>Correctly updating a <code>static</code> field from a non-static method is tricky to get right and could easily lead to bugs if there are multiple class instances  and/or multiple threads in play. Ideally, <code>static</code> fields are only updated from <code>synchronized static</code> methods.</p>\n<p>This rule raises an issue each time a <code>static</code> field is updated from a non-static method.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  private static int count = 0;\n\n  public void doSomething() {\n    //...\n    count++;  // Noncompliant\n  }\n}\n</pre>",
      "severity": "CRITICAL",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "multi-threading"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "20min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "20min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "20min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "20min",
      "remFnOverloaded": false,
      "type": "BUG"
    },
    {
      "key": "squid:S1244",
      "repo": "squid",
      "name": "Floating point numbers should not be tested for equality",
      "createdAt": "2014-10-10T17:54:03+0200",
      "htmlDesc": "<p>Floating point math is imprecise because of the challenges of storing such values in a binary representation. Even worse, floating point math is not associative; push a <code>float</code> or a <code>double</code> through a series of simple mathematical operations and the answer will be different based on the order of those operation because of the rounding that takes place at each step.</p>\n<p>Even simple floating point assignments are not simple:</p>\n<pre>\nfloat f = 0.1; // 0.100000001490116119384765625\ndouble d = 0.1; // 0.1000000000000000055511151231257827021181583404541015625\n</pre>\n<p>(Results will vary based on compiler and compiler settings);</p>\n<p>Therefore, the use of the equality (<code>==</code>) and inequality (<code>!=</code>) operators on <code>float</code> or <code>double</code> values is almost always an error, and the use of other comparison operators (<code>&gt;</code>, <code>&gt;=</code>, <code>&lt;</code>, <code>&lt;=</code>) is also problematic because they don't work properly for -0 and <code>NaN</code>. </p>\n<p>Instead the best course is to avoid floating point comparisons altogether. When that is not possible, you should consider using one of Java's float-handling <code>Numbers</code> such as <code>BigDecimal</code> which can properly handle floating point comparisons. A third option is to look not for equality but for whether the value is close enough. I.e. compare the absolute value of the difference between the stored value and the expected value against a margin of acceptable error. Note that this does not cover all cases (<code>NaN</code> and <code>Infinity</code> for instance).</p>\n<p>This rule checks for the use of direct and indirect equality/inequailty tests on floats and doubles.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre> \nfloat myNumber = 3.146; \nif ( myNumber == 3.146f ) { //Noncompliant. Because of floating point imprecision, this will be false \n  // ... \n} \nif ( myNumber != 3.146f ) { //Noncompliant. Because of floating point imprecision, this will be true \n  // ... \n} \n\nif (myNumber &lt; 4 || myNumber &gt; 4) { // Noncompliant; indirect inequality test\n  // ...\n}\n\nfloat zeroFloat = 0.0f;\nif (zeroFloat == 0) {  // Noncompliant. Computations may end up with a value close but not equal to zero.\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>Since <code>NaN</code> is not equal to itself, the specific case of testing a floating point value against itself is a valid test for <code>NaN</code> and is therefore ignored.</p>\n<pre>\nfloat f;\ndouble d;\nif(f != f) { // Compliant; test for NaN value\n  System.out.println(\"f is NaN\");\n} else if (f != d) { // Noncompliant\n  // ...\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> MISRA C:2004, 13.3 - Floating-point expressions shall not be tested for equality or inequality.\n</li><li> MISRA C++:2008, 6-2-2 - Floating-point expressions shall not be directly or indirectly tested for equality or inequality\n</li></ul>",
      "mdDesc": "<p>Floating point math is imprecise because of the challenges of storing such values in a binary representation. Even worse, floating point math is not associative; push a <code>float</code> or a <code>double</code> through a series of simple mathematical operations and the answer will be different based on the order of those operation because of the rounding that takes place at each step.</p>\n<p>Even simple floating point assignments are not simple:</p>\n<pre>\nfloat f = 0.1; // 0.100000001490116119384765625\ndouble d = 0.1; // 0.1000000000000000055511151231257827021181583404541015625\n</pre>\n<p>(Results will vary based on compiler and compiler settings);</p>\n<p>Therefore, the use of the equality (<code>==</code>) and inequality (<code>!=</code>) operators on <code>float</code> or <code>double</code> values is almost always an error, and the use of other comparison operators (<code>&gt;</code>, <code>&gt;=</code>, <code>&lt;</code>, <code>&lt;=</code>) is also problematic because they don't work properly for -0 and <code>NaN</code>. </p>\n<p>Instead the best course is to avoid floating point comparisons altogether. When that is not possible, you should consider using one of Java's float-handling <code>Numbers</code> such as <code>BigDecimal</code> which can properly handle floating point comparisons. A third option is to look not for equality but for whether the value is close enough. I.e. compare the absolute value of the difference between the stored value and the expected value against a margin of acceptable error. Note that this does not cover all cases (<code>NaN</code> and <code>Infinity</code> for instance).</p>\n<p>This rule checks for the use of direct and indirect equality/inequailty tests on floats and doubles.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre> \nfloat myNumber = 3.146; \nif ( myNumber == 3.146f ) { //Noncompliant. Because of floating point imprecision, this will be false \n  // ... \n} \nif ( myNumber != 3.146f ) { //Noncompliant. Because of floating point imprecision, this will be true \n  // ... \n} \n\nif (myNumber &lt; 4 || myNumber &gt; 4) { // Noncompliant; indirect inequality test\n  // ...\n}\n\nfloat zeroFloat = 0.0f;\nif (zeroFloat == 0) {  // Noncompliant. Computations may end up with a value close but not equal to zero.\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>Since <code>NaN</code> is not equal to itself, the specific case of testing a floating point value against itself is a valid test for <code>NaN</code> and is therefore ignored.</p>\n<pre>\nfloat f;\ndouble d;\nif(f != f) { // Compliant; test for NaN value\n  System.out.println(\"f is NaN\");\n} else if (f != d) { // Noncompliant\n  // ...\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> MISRA C:2004, 13.3 - Floating-point expressions shall not be tested for equality or inequality.\n</li><li> MISRA C++:2008, 6-2-2 - Floating-point expressions shall not be directly or indirectly tested for equality or inequality\n</li></ul>",
      "severity": "CRITICAL",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "misra"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "5min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "5min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "5min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "5min",
      "remFnOverloaded": false,
      "type": "BUG"
    },
    {
      "key": "squid:S3421",
      "repo": "squid",
      "name": "Deprecated \"${pom}\" properties should not be used",
      "createdAt": "2016-01-27T12:14:24+0100",
      "htmlDesc": "<p>Deprecated features are those that have been retained temporarily for backward compatibility, but which will eventually be removed. In effect, deprecation announces a grace period to allow the smooth transition from the old features to the new ones. In that period, no use of the deprecated features should be added, and all existing uses should be gradually removed.</p>\n<p>This rule raises an issue when <code>${pom.*</code>} properties are used in a pom.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n  &lt;build&gt;\n    &lt;finalName&gt;${pom.artifactId}-${pom.version}&lt;/finalName&gt;  &lt;!-- Noncompliant --&gt;\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n  &lt;build&gt;\n    &lt;finalName&gt;${project.artifactId}-${project.version}&lt;/finalName&gt;\n</pre>\n<p>or</p>\n<pre>\n  &lt;build&gt;\n    &lt;finalName&gt;${artifactId}-${version}&lt;/finalName&gt;\n</pre>",
      "mdDesc": "<p>Deprecated features are those that have been retained temporarily for backward compatibility, but which will eventually be removed. In effect, deprecation announces a grace period to allow the smooth transition from the old features to the new ones. In that period, no use of the deprecated features should be added, and all existing uses should be gradually removed.</p>\n<p>This rule raises an issue when <code>${pom.*</code>} properties are used in a pom.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n  &lt;build&gt;\n    &lt;finalName&gt;${pom.artifactId}-${pom.version}&lt;/finalName&gt;  &lt;!-- Noncompliant --&gt;\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n  &lt;build&gt;\n    &lt;finalName&gt;${project.artifactId}-${project.version}&lt;/finalName&gt;\n</pre>\n<p>or</p>\n<pre>\n  &lt;build&gt;\n    &lt;finalName&gt;${artifactId}-${version}&lt;/finalName&gt;\n</pre>",
      "severity": "MAJOR",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "maven",
        "obsolete"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "2min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "2min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "2min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "2min",
      "remFnOverloaded": false,
      "type": "CODE_SMELL"
    },
    {
      "key": "squid:S2695",
      "repo": "squid",
      "name": "\"PreparedStatement\" and \"ResultSet\" methods should be called with valid indices",
      "createdAt": "2015-04-01T10:36:59+0200",
      "htmlDesc": "<p>The parameters in a <code>PreparedStatement</code> are numbered from 1, not 0, so using any set method of a <code>PreparedStatement</code> with a number less than 1 is a bug, as is using an index higher than the number of parameters. Similarly, <code>ResultSet</code> indices also start at 1, rather than 0</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nPreparedStatement ps = con.prepareStatement(\"SELECT fname, lname FROM employees where hireDate &gt; ? and salary &lt; ?\");\nps.setDate(0, date);  // Noncompliant\nps.setDouble(3, salary);  // Noncompliant\n\nResultSet rs = ps.executeQuery();\nwhile (rs.next()) {\n  String fname = rs.getString(0);  // Noncompliant\n  // ...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nPreparedStatement ps = con.prepareStatement(\"SELECT fname, lname FROM employees where hireDate &gt; ? and salary &lt; ?\");\nps.setDate(1, date);\nps.setDouble(2, salary);\n\nResultSet rs = ps.executeQuery();\nwhile (rs.next()) {\n  String fname = rs.getString(1);\n  // ...\n}\n</pre>",
      "mdDesc": "<p>The parameters in a <code>PreparedStatement</code> are numbered from 1, not 0, so using any set method of a <code>PreparedStatement</code> with a number less than 1 is a bug, as is using an index higher than the number of parameters. Similarly, <code>ResultSet</code> indices also start at 1, rather than 0</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nPreparedStatement ps = con.prepareStatement(\"SELECT fname, lname FROM employees where hireDate &gt; ? and salary &lt; ?\");\nps.setDate(0, date);  // Noncompliant\nps.setDouble(3, salary);  // Noncompliant\n\nResultSet rs = ps.executeQuery();\nwhile (rs.next()) {\n  String fname = rs.getString(0);  // Noncompliant\n  // ...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nPreparedStatement ps = con.prepareStatement(\"SELECT fname, lname FROM employees where hireDate &gt; ? and salary &lt; ?\");\nps.setDate(1, date);\nps.setDouble(2, salary);\n\nResultSet rs = ps.executeQuery();\nwhile (rs.next()) {\n  String fname = rs.getString(1);\n  // ...\n}\n</pre>",
      "severity": "BLOCKER",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "sql"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "2min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "2min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "2min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "2min",
      "remFnOverloaded": false,
      "type": "BUG"
    },
    {
      "key": "squid:S2692",
      "repo": "squid",
      "name": "\"indexOf\" checks should not be for positive numbers",
      "createdAt": "2015-05-20T05:01:40+0200",
      "htmlDesc": "<p>Most checks against an <code>indexOf</code> value compare it with -1 because 0 is a valid index. Any checks which look for values &gt;0 ignore the first element, which is likely a bug. If the intent is merely to check inclusion of a value in a <code>String</code> or a <code>List</code>, consider using the <code>contains</code> method instead.</p>\n<p>This rule raises an issue when an <code>indexOf</code> value retrieved either from a <code>String</code> or a <code>List</code> is tested against <code>&gt;0</code>.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nString color = \"blue\";\nString name = \"ishmael\";\n\nList&lt;String&gt; strings = new ArrayList&lt;String&gt; ();\nstrings.add(color);\nstrings.add(name);\n\nif (strings.indexOf(color) &gt; 0) {  // Noncompliant\n  // ...\n}\nif (name.indexOf(\"ish\") &gt; 0) { // Noncompliant\n  // ...\n}\nif (name.indexOf(\"ae\") &gt; 0) { // Noncompliant\n  // ...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nString color = \"blue\";\nString name = \"ishmael\";\n\nList&lt;String&gt; strings = new ArrayList&lt;String&gt; ();\nstrings.add(color);\nstrings.add(name);\n\nif (strings.indexOf(color) &gt; -1) {\n  // ...\n}\nif (name.indexOf(\"ish\") &gt;= 0) {\n  // ...\n}\nif (name.contains(\"ae\") {\n  // ...\n}\n</pre>",
      "mdDesc": "<p>Most checks against an <code>indexOf</code> value compare it with -1 because 0 is a valid index. Any checks which look for values &gt;0 ignore the first element, which is likely a bug. If the intent is merely to check inclusion of a value in a <code>String</code> or a <code>List</code>, consider using the <code>contains</code> method instead.</p>\n<p>This rule raises an issue when an <code>indexOf</code> value retrieved either from a <code>String</code> or a <code>List</code> is tested against <code>&gt;0</code>.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nString color = \"blue\";\nString name = \"ishmael\";\n\nList&lt;String&gt; strings = new ArrayList&lt;String&gt; ();\nstrings.add(color);\nstrings.add(name);\n\nif (strings.indexOf(color) &gt; 0) {  // Noncompliant\n  // ...\n}\nif (name.indexOf(\"ish\") &gt; 0) { // Noncompliant\n  // ...\n}\nif (name.indexOf(\"ae\") &gt; 0) { // Noncompliant\n  // ...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nString color = \"blue\";\nString name = \"ishmael\";\n\nList&lt;String&gt; strings = new ArrayList&lt;String&gt; ();\nstrings.add(color);\nstrings.add(name);\n\nif (strings.indexOf(color) &gt; -1) {\n  // ...\n}\nif (name.indexOf(\"ish\") &gt;= 0) {\n  // ...\n}\nif (name.contains(\"ae\") {\n  // ...\n}\n</pre>",
      "severity": "MAJOR",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "suspicious"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "2min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "2min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "2min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "2min",
      "remFnOverloaded": false,
      "type": "CODE_SMELL"
    },
    {
      "key": "squid:S3306",
      "repo": "squid",
      "name": "Constructor injection should be used instead of field injection",
      "createdAt": "2016-03-30T18:19:38+0200",
      "htmlDesc": "<p>Field injection seems like a tidy way to get your classes what they need to do their jobs, but it's really a <code>NullPointerException</code> waiting to happen unless all your class constructors are <code>private</code>. That's because any class instances that are constructed by callers, rather than instantiated by the Spring framework, won't have the ability to perform the field injection.</p>\n<p>Instead <code>@Inject</code> should be moved to the constructor and the fields required as constructor parameters.</p>\n<p>This rule raises an issue when classes with non-<code>private</code> constructors (including the default constructor) use field injection.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyComponent {  // Anyone can call the default constructor \n \n  @Inject MyCollaborator collaborator;  // Noncompliant\n  \n  public void myBusinessMethod() {\n    collaborator.doSomething();  // this will fail in classes new-ed by a caller\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nclass MyComponent {\n \n  private final MyCollaborator collaborator;\n  \n  @Inject\n  public MyComponent(MyCollaborator collaborator) {\n    Assert.notNull(collaborator, \"MyCollaborator must not be null!\");\n    this.collaborator = collaborator;\n  }\n\n  public void myBusinessMethod() {\n    collaborator.doSomething();\n  }\n}\n</pre>",
      "mdDesc": "<p>Field injection seems like a tidy way to get your classes what they need to do their jobs, but it's really a <code>NullPointerException</code> waiting to happen unless all your class constructors are <code>private</code>. That's because any class instances that are constructed by callers, rather than instantiated by the Spring framework, won't have the ability to perform the field injection.</p>\n<p>Instead <code>@Inject</code> should be moved to the constructor and the fields required as constructor parameters.</p>\n<p>This rule raises an issue when classes with non-<code>private</code> constructors (including the default constructor) use field injection.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyComponent {  // Anyone can call the default constructor \n \n  @Inject MyCollaborator collaborator;  // Noncompliant\n  \n  public void myBusinessMethod() {\n    collaborator.doSomething();  // this will fail in classes new-ed by a caller\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nclass MyComponent {\n \n  private final MyCollaborator collaborator;\n  \n  @Inject\n  public MyComponent(MyCollaborator collaborator) {\n    Assert.notNull(collaborator, \"MyCollaborator must not be null!\");\n    this.collaborator = collaborator;\n  }\n\n  public void myBusinessMethod() {\n    collaborator.doSomething();\n  }\n}\n</pre>",
      "severity": "MAJOR",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "design",
        "pitfall"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "5min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "5min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "5min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "5min",
      "remFnOverloaded": false,
      "type": "CODE_SMELL"
    },
    {
      "key": "squid:CallToDeprecatedMethod",
      "repo": "squid",
      "name": "\"@Deprecated\" code should not be used",
      "createdAt": "2013-06-19T07:34:52+0200",
      "htmlDesc": "<p>Once deprecated, classes, and interfaces, and their members should be avoided, rather than used, inherited or extended. Deprecation is a warning that the class or interface has been superseded, and will eventually be removed. The deprecation period allows you to make a smooth transition away from the aging, soon-to-be-retired technology.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n/**\n * @deprecated  As of release 1.3, replaced by {@link #Fee}\n */@Deprecated\nclass Fum { ... }\n\npublic class Bar extends Fum {  // Noncompliant; Fum is deprecated\n\n  public void myMethod() {\n    Foo foo = new Foo();  // okay; the class isn't deprecated\n    foo.doTheThing();  // Noncompliant\n  }\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/477.html\">MITRE, CWE-477</a> - Use of Obsolete Functions\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/KgAVAg\">CERT, MET02-J.</a> - Do not use deprecated or obsolete classes or methods\n</li></ul>",
      "mdDesc": "<p>Once deprecated, classes, and interfaces, and their members should be avoided, rather than used, inherited or extended. Deprecation is a warning that the class or interface has been superseded, and will eventually be removed. The deprecation period allows you to make a smooth transition away from the aging, soon-to-be-retired technology.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n/**\n * @deprecated  As of release 1.3, replaced by {@link #Fee}\n */@Deprecated\nclass Fum { ... }\n\npublic class Bar extends Fum {  // Noncompliant; Fum is deprecated\n\n  public void myMethod() {\n    Foo foo = new Foo();  // okay; the class isn't deprecated\n    foo.doTheThing();  // Noncompliant\n  }\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/477.html\">MITRE, CWE-477</a> - Use of Obsolete Functions\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/KgAVAg\">CERT, MET02-J.</a> - Do not use deprecated or obsolete classes or methods\n</li></ul>",
      "severity": "MINOR",
      "status": "READY",
      "internalKey": "S1874",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "cert",
        "cwe",
        "obsolete"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "15min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "15min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "15min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "15min",
      "remFnOverloaded": false,
      "type": "CODE_SMELL"
    },
    {
      "key": "squid:SwitchLastCaseIsDefaultCheck",
      "repo": "squid",
      "name": "\"switch\" statements should end with \"default\" clauses",
      "createdAt": "2013-08-30T17:20:57+0200",
      "htmlDesc": "<p>The requirement for a final <code>default</code> clause is defensive programming. The clause should either take appropriate action, or contain a suitable comment as to why no action is taken. Even when the <code>switch</code> covers all current values of an <code>enum</code>, a <code>default</code> case should still be used because there is no guarantee that the <code>enum</code> won't be extended.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (param) {  //missing default clause\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n}\n\nswitch (param) {\n  default: // default clause should be the last one\n    error();\n    break;\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nswitch (param) {\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n  default:\n    error();\n    break;\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used.\n</li><li> MISRA C:2004, 15.3 - The final clause of a switch statement shall be the default clause\n</li><li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement.\n</li><li> MISRA C++:2008, 6-4-6 - The final clause of a switch statement shall be the default-clause\n</li><li> MISRA C:2012, 16.1 - All switch statements shall be well-formed\n</li><li> MISRA C:2012, 16.4 - Every <em>switch</em> statement shall have a <em>default</em> label\n</li><li> MISRA C:2012, 16.5 - A <em>default</em> label shall appear as either the first or the last <em>switch label</em> of a <em>switch</em> statement\n</li><li> <a href=\"http://cwe.mitre.org/data/definitions/478.html\">MITRE, CWE-478</a> - Missing Default Case in Switch Statement\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/YgE\">CERT, MSC01-C.</a> - Strive for logical completeness\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/JoIyAQ\">CERT, MSC01-CPP.</a> - Strive for logical completeness\n</li></ul>",
      "mdDesc": "<p>The requirement for a final <code>default</code> clause is defensive programming. The clause should either take appropriate action, or contain a suitable comment as to why no action is taken. Even when the <code>switch</code> covers all current values of an <code>enum</code>, a <code>default</code> case should still be used because there is no guarantee that the <code>enum</code> won't be extended.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (param) {  //missing default clause\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n}\n\nswitch (param) {\n  default: // default clause should be the last one\n    error();\n    break;\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nswitch (param) {\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n  default:\n    error();\n    break;\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used.\n</li><li> MISRA C:2004, 15.3 - The final clause of a switch statement shall be the default clause\n</li><li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement.\n</li><li> MISRA C++:2008, 6-4-6 - The final clause of a switch statement shall be the default-clause\n</li><li> MISRA C:2012, 16.1 - All switch statements shall be well-formed\n</li><li> MISRA C:2012, 16.4 - Every <em>switch</em> statement shall have a <em>default</em> label\n</li><li> MISRA C:2012, 16.5 - A <em>default</em> label shall appear as either the first or the last <em>switch label</em> of a <em>switch</em> statement\n</li><li> <a href=\"http://cwe.mitre.org/data/definitions/478.html\">MITRE, CWE-478</a> - Missing Default Case in Switch Statement\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/YgE\">CERT, MSC01-C.</a> - Strive for logical completeness\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/JoIyAQ\">CERT, MSC01-CPP.</a> - Strive for logical completeness\n</li></ul>",
      "severity": "MAJOR",
      "status": "READY",
      "internalKey": "S131",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "cert",
        "cwe",
        "misra"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "5min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "5min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "5min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "5min",
      "remFnOverloaded": false,
      "type": "CODE_SMELL"
    },
    {
      "key": "squid:S1481",
      "repo": "squid",
      "name": "Unused local variables should be removed",
      "createdAt": "2014-01-01T16:20:52+0100",
      "htmlDesc": "<p>If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will not wonder what the variable is used for.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int numberOfMinutes(int hours) {\n  int seconds = 0;   // seconds is never used \n  return hours * 60;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic int numberOfMinutes(int hours) {\n  return hours * 60;\n}\n</pre>",
      "mdDesc": "<p>If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will not wonder what the variable is used for.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int numberOfMinutes(int hours) {\n  int seconds = 0;   // seconds is never used \n  return hours * 60;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic int numberOfMinutes(int hours) {\n  return hours * 60;\n}\n</pre>",
      "severity": "MAJOR",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "unused"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "5min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "5min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "5min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "5min",
      "remFnOverloaded": false,
      "type": "CODE_SMELL"
    },
    {
      "key": "squid:S1610",
      "repo": "squid",
      "name": "Abstract classes without fields should be converted to interfaces",
      "createdAt": "2014-05-23T09:38:18+0200",
      "htmlDesc": "<p>With Java 8's \"default method\" feature, any abstract class without direct or inherited field should be converted into an interface.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic abstract class Car {\n  public abstract void start(Environment c);\n\n  public void stop(Environment c) {\n    c.freeze(this);\n  }\n}\n</pre> \n\n<h2>Compliant Solution</h2>\n<pre>\npublic interface Car {\n  public void start(Environment c);\n\n  public default void stop(Environment c) {\n    c.freeze(this);\n  }\n}\n</pre>",
      "mdDesc": "<p>With Java 8's \"default method\" feature, any abstract class without direct or inherited field should be converted into an interface.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic abstract class Car {\n  public abstract void start(Environment c);\n\n  public void stop(Environment c) {\n    c.freeze(this);\n  }\n}\n</pre> \n\n<h2>Compliant Solution</h2>\n<pre>\npublic interface Car {\n  public void start(Environment c);\n\n  public default void stop(Environment c) {\n    c.freeze(this);\n  }\n}\n</pre>",
      "severity": "MAJOR",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "java8"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "10min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "10min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "10min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "10min",
      "remFnOverloaded": false,
      "type": "CODE_SMELL"
    },
    {
      "key": "squid:S2388",
      "repo": "squid",
      "name": "Inner class calls to super class methods should be unambiguous",
      "createdAt": "2015-03-03T16:25:18+0100",
      "htmlDesc": "<p>When an inner class extends another class, and both its outer class and its parent class have a method with the same name, calls to that method can be confusing. The compiler will resolve the call to the superclass method, but maintainers may be confused, so the superclass method should be called explicitly, using <code>super.</code>.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Parent {\n  public void foo() { ... }\n}\n\npublic class Outer {\n\n  public void foo() { ... }\n\n  public class Inner extends Parent {\n\n    public void doTheThing() {\n      foo();  // Noncompliant; was Outer.this.foo() intended instead?\n      // ...\n    }\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Parent {\n  public void foo() { ... }\n}\n\npublic class Outer {\n\n  public void foo() { ... }\n\n  public class Inner extends Parent {\n\n    public void doTheThing() {\n      super.foo();\n      // ...\n    }\n  }\n}\n</pre>",
      "mdDesc": "<p>When an inner class extends another class, and both its outer class and its parent class have a method with the same name, calls to that method can be confusing. The compiler will resolve the call to the superclass method, but maintainers may be confused, so the superclass method should be called explicitly, using <code>super.</code>.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Parent {\n  public void foo() { ... }\n}\n\npublic class Outer {\n\n  public void foo() { ... }\n\n  public class Inner extends Parent {\n\n    public void doTheThing() {\n      foo();  // Noncompliant; was Outer.this.foo() intended instead?\n      // ...\n    }\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Parent {\n  public void foo() { ... }\n}\n\npublic class Outer {\n\n  public void foo() { ... }\n\n  public class Inner extends Parent {\n\n    public void doTheThing() {\n      super.foo();\n      // ...\n    }\n  }\n}\n</pre>",
      "severity": "MAJOR",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "pitfall"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "5min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "5min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "5min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "5min",
      "remFnOverloaded": false,
      "type": "CODE_SMELL"
    },
    {
      "key": "squid:S1850",
      "repo": "squid",
      "name": "\"instanceof\" operators that always return \"true\" or \"false\" should be removed",
      "createdAt": "2014-11-19T08:29:01+0100",
      "htmlDesc": "<p><code>instanceof</code> operators that always return <code>true</code> or <code>false</code> are either useless or the result of a misunderstanding which could lead to unexpected behavior in production.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic boolean isSuitable(Integer param) {\n...\n  String name = null;\n\n  if (name instanceof String) { // Noncompliant; always false since name is null\n    //...\n  }\n\n  if(param instanceof Number) {  // Noncompliant; always true unless param is null, because param is an Integer\n    doSomething();\n  }\n...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean isSuitable(Integer param) {\n...\n  doSomething();\n...\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/571.html\">MITRE, CWE-571</a> - Expression is Always True\n</li><li> <a href=\"http://cwe.mitre.org/data/definitions/570.html\">MITRE, CWE-570</a> - Expression is Always False\n</li></ul>",
      "mdDesc": "<p><code>instanceof</code> operators that always return <code>true</code> or <code>false</code> are either useless or the result of a misunderstanding which could lead to unexpected behavior in production.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic boolean isSuitable(Integer param) {\n...\n  String name = null;\n\n  if (name instanceof String) { // Noncompliant; always false since name is null\n    //...\n  }\n\n  if(param instanceof Number) {  // Noncompliant; always true unless param is null, because param is an Integer\n    doSomething();\n  }\n...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean isSuitable(Integer param) {\n...\n  doSomething();\n...\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/571.html\">MITRE, CWE-571</a> - Expression is Always True\n</li><li> <a href=\"http://cwe.mitre.org/data/definitions/570.html\">MITRE, CWE-570</a> - Expression is Always False\n</li></ul>",
      "severity": "MAJOR",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "cwe",
        "suspicious"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "5min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "5min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "5min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "5min",
      "remFnOverloaded": false,
      "type": "CODE_SMELL"
    },
    {
      "key": "squid:S2147",
      "repo": "squid",
      "name": "Catches should be combined",
      "createdAt": "2016-01-06T17:41:29+0100",
      "htmlDesc": "<p>Since Java 7 it has been possible to catch multiple exceptions at once. Therefore, when multiple <code>catch</code> blocks have the same code, they should be combined for better readability.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\ncatch (IOException e) {\n  doCleanup();\n  logger.log(e);\n}\ncatch (SQLException e) {  // Noncompliant\n  doCleanup();\n  logger.log(e);\n}\ncatch (TimeoutException e) {  // Compliant; block contents are different\n  doCleanup();\n  throw e;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\ncatch (IOException|SQLException e) {\n  doCleanup();\n  logger.log(e);\n}\ncatch (TimeoutException e) {\n  doCleanup();\n  throw e;\n}\n</pre>",
      "mdDesc": "<p>Since Java 7 it has been possible to catch multiple exceptions at once. Therefore, when multiple <code>catch</code> blocks have the same code, they should be combined for better readability.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\ncatch (IOException e) {\n  doCleanup();\n  logger.log(e);\n}\ncatch (SQLException e) {  // Noncompliant\n  doCleanup();\n  logger.log(e);\n}\ncatch (TimeoutException e) {  // Compliant; block contents are different\n  doCleanup();\n  throw e;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\ncatch (IOException|SQLException e) {\n  doCleanup();\n  logger.log(e);\n}\ncatch (TimeoutException e) {\n  doCleanup();\n  throw e;\n}\n</pre>",
      "severity": "MAJOR",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "clumsy"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "5min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "5min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "5min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "5min",
      "remFnOverloaded": false,
      "type": "CODE_SMELL"
    },
    {
      "key": "squid:S2386",
      "repo": "squid",
      "name": "Mutable fields should not be \"public static\"",
      "createdAt": "2015-02-17T07:18:47+0100",
      "htmlDesc": "<p>There is no good reason to have a mutable object as the <code>public</code> (by default), <code>static</code> member of an <code>interface</code>. Such variables should be moved into classes and their visibility lowered. </p>\n<p>Similarly, mutable <code>static</code> members of classes and enumerations which are accessed directly, rather than through getters and setters, should be protected to the degree possible. That can be done by reducing visibility or making the field <code>final</code> if appropriate. </p>\n<p>Note that making a mutable field, such as an array, <code>final</code> will keep the variable from being reassigned, but doing so has no effect on the mutability of the internal state of the array (i.e. it doesn't accomplish the goal).</p>\n<p>This rule raises issues for <code>public static</code> array, <code>Collection</code>, <code>Date</code>, and <code>awt.Point</code> members.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface MyInterface {\n  public static String [] strings; // Noncompliant\n}\n\npublic class A {\n  public static String [] strings1 = {\"first\",\"second\"};  // Noncompliant\n  public static String [] strings2 = {\"first\",\"second\"};  // Noncompliant\n  public static List&lt;String&gt; strings3 = new ArrayList&lt;&gt;();  // Noncompliant\n  // ...\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/582.html\">MITRE, CWE-582</a> - Array Declared Public, Final, and Static\n</li><li> <a href=\"http://cwe.mitre.org/data/definitions/607.html\">MITRE, CWE-607</a> - Public Static Final Field References Mutable Object\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/rwBc\">CERT, OBJ01-J.</a> - Limit accessibility of fields\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/JQLEAw\">CERT, OBJ13-J.</a> - Ensure that references to mutable objects are not exposed\n</li></ul>",
      "mdDesc": "<p>There is no good reason to have a mutable object as the <code>public</code> (by default), <code>static</code> member of an <code>interface</code>. Such variables should be moved into classes and their visibility lowered. </p>\n<p>Similarly, mutable <code>static</code> members of classes and enumerations which are accessed directly, rather than through getters and setters, should be protected to the degree possible. That can be done by reducing visibility or making the field <code>final</code> if appropriate. </p>\n<p>Note that making a mutable field, such as an array, <code>final</code> will keep the variable from being reassigned, but doing so has no effect on the mutability of the internal state of the array (i.e. it doesn't accomplish the goal).</p>\n<p>This rule raises issues for <code>public static</code> array, <code>Collection</code>, <code>Date</code>, and <code>awt.Point</code> members.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface MyInterface {\n  public static String [] strings; // Noncompliant\n}\n\npublic class A {\n  public static String [] strings1 = {\"first\",\"second\"};  // Noncompliant\n  public static String [] strings2 = {\"first\",\"second\"};  // Noncompliant\n  public static List&lt;String&gt; strings3 = new ArrayList&lt;&gt;();  // Noncompliant\n  // ...\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/582.html\">MITRE, CWE-582</a> - Array Declared Public, Final, and Static\n</li><li> <a href=\"http://cwe.mitre.org/data/definitions/607.html\">MITRE, CWE-607</a> - Public Static Final Field References Mutable Object\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/rwBc\">CERT, OBJ01-J.</a> - Limit accessibility of fields\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/JQLEAw\">CERT, OBJ13-J.</a> - Ensure that references to mutable objects are not exposed\n</li></ul>",
      "severity": "CRITICAL",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "cert",
        "cwe",
        "unpredictable"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "15min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "15min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "15min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "15min",
      "remFnOverloaded": false,
      "type": "VULNERABILITY"
    },
    {
      "key": "squid:S3355",
      "repo": "squid",
      "name": "Web applications should use validation filters",
      "createdAt": "2016-01-25T14:33:27+0100",
      "htmlDesc": "<p>Specifying a validation filter for all input in your <code>web.xml</code> allows you to scrub all your HTTP parameters in one central place. To do so, you'll need to define a validator, and a filtering class that uses it, then set up the filter's use in <code>web.xml</code>.</p>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class ValidatingHttpRequest extends HttpServletRequestWrapper {\n  // ...\n}\n\npublic class ValidationFilter implements javax.servlet.Filter {\n  public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) {\n    chain.doFilter(new ValidatingHttpRequest( (HttpServletRequest)request ), response);\n  }\n}\n</pre>\n<p>and</p>\n<pre>\n  &lt;filter&gt;\n     &lt;filter-name&gt;ValidationFilter&lt;/filter-name&gt;\n     &lt;filter-class&gt;com.myco.servlet.ValidationFilter&lt;/filter-class&gt;\n  &lt;/filter&gt;\n       \n  &lt;filter-mapping&gt;\n     &lt;filter-name&gt;ValidationFilter&lt;/filter-name&gt;\n     &lt;url-pattern&gt;/*&lt;/url-pattern&gt;\n  &lt;/filter-mapping&gt;\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A1-Injection\">OWASP Top Ten 2013 Category A1</a> - Injection\n</li><li> <a href=\"https://www.owasp.org/index.php/How_to_add_validation_logic_to_HttpServletRequest\">OWASP, How to add validation logic to HttpServletRequest</a>\n</li></ul>",
      "mdDesc": "<p>Specifying a validation filter for all input in your <code>web.xml</code> allows you to scrub all your HTTP parameters in one central place. To do so, you'll need to define a validator, and a filtering class that uses it, then set up the filter's use in <code>web.xml</code>.</p>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class ValidatingHttpRequest extends HttpServletRequestWrapper {\n  // ...\n}\n\npublic class ValidationFilter implements javax.servlet.Filter {\n  public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) {\n    chain.doFilter(new ValidatingHttpRequest( (HttpServletRequest)request ), response);\n  }\n}\n</pre>\n<p>and</p>\n<pre>\n  &lt;filter&gt;\n     &lt;filter-name&gt;ValidationFilter&lt;/filter-name&gt;\n     &lt;filter-class&gt;com.myco.servlet.ValidationFilter&lt;/filter-class&gt;\n  &lt;/filter&gt;\n       \n  &lt;filter-mapping&gt;\n     &lt;filter-name&gt;ValidationFilter&lt;/filter-name&gt;\n     &lt;url-pattern&gt;/*&lt;/url-pattern&gt;\n  &lt;/filter-mapping&gt;\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A1-Injection\">OWASP Top Ten 2013 Category A1</a> - Injection\n</li><li> <a href=\"https://www.owasp.org/index.php/How_to_add_validation_logic_to_HttpServletRequest\">OWASP, How to add validation logic to HttpServletRequest</a>\n</li></ul>",
      "severity": "CRITICAL",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "injection",
        "owasp-a1"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "30min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "30min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "30min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "30min",
      "remFnOverloaded": false,
      "type": "VULNERABILITY"
    },
    {
      "key": "squid:S2387",
      "repo": "squid",
      "name": "Child class fields should not shadow parent class fields",
      "createdAt": "2015-05-20T05:01:39+0200",
      "htmlDesc": "<p>Having a variable with the same name in two unrelated classes is fine, but do the same thing within a class hierarchy and you'll get confusion at best, chaos at worst. Perhaps even worse is the case where a child class field varies from the name of a parent class only by case.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit {\n  protected Season ripe;\n  protected Color flesh;\n\n  // ...\n}\n\npublic class Raspberry extends Fruit {\n  private boolean ripe;  // Noncompliant\n  private static Color FLESH; // Noncompliant\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Fruit {\n  protected Season ripe;\n  protected Color flesh;\n\n  // ...\n}\n\npublic class Raspberry extends Fruit {\n  private boolean ripened;\n  private static Color FLESH_COLOR;\n\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>This rule ignores <code>private</code> parent class fields, but in all other such cases, the child class field should be renamed.</p>\n<pre>\npublic class Fruit {\n  private Season ripe;\n  // ...\n}\n\npublic class Raspberry extends Fruit {\n  private Season ripe;  // Compliant as parent field 'ripe' is anyway not visible from Raspberry\n  // ...\n}\n</pre>",
      "mdDesc": "<p>Having a variable with the same name in two unrelated classes is fine, but do the same thing within a class hierarchy and you'll get confusion at best, chaos at worst. Perhaps even worse is the case where a child class field varies from the name of a parent class only by case.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit {\n  protected Season ripe;\n  protected Color flesh;\n\n  // ...\n}\n\npublic class Raspberry extends Fruit {\n  private boolean ripe;  // Noncompliant\n  private static Color FLESH; // Noncompliant\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Fruit {\n  protected Season ripe;\n  protected Color flesh;\n\n  // ...\n}\n\npublic class Raspberry extends Fruit {\n  private boolean ripened;\n  private static Color FLESH_COLOR;\n\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>This rule ignores <code>private</code> parent class fields, but in all other such cases, the child class field should be renamed.</p>\n<pre>\npublic class Fruit {\n  private Season ripe;\n  // ...\n}\n\npublic class Raspberry extends Fruit {\n  private Season ripe;  // Compliant as parent field 'ripe' is anyway not visible from Raspberry\n  // ...\n}\n</pre>",
      "severity": "MAJOR",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "confusing"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "5min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "5min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "5min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "5min",
      "remFnOverloaded": false,
      "type": "CODE_SMELL"
    },
    {
      "key": "squid:S2142",
      "repo": "squid",
      "name": "\"InterruptedException\" should not be ignored",
      "createdAt": "2016-01-27T12:14:23+0100",
      "htmlDesc": "<p><code>InterruptedExceptions</code> should never be ignored in the code, and simply logging the exception counts in this case as \"ignoring\". Instead, <code>InterruptedExceptions</code> should either be rethrown - immediately or after cleaning up the method's state - or the method should be reinterrupted. Any other course of action risks delaying thread shutdown and loses the information that the thread was interrupted - probably without finishing its task.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void run () {\n  try {\n    while (true) { \n      // do stuff\n    }\n  }catch (InterruptedException e) { // Noncompliant; logging is not enough\n    LOGGER.log(Level.WARN, \"Interrupted!\", e);\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic void run () throws InterruptedException{\n  try {\n    while (true) { \n      // do stuff\n    }\n  }catch (InterruptedException e) {\n    LOGGER.log(Level.WARN, \"Interrupted!\", e);\n    // clean up state...\n    throw e;\n  }\n}\n</pre>\n<p>or</p>\n<pre>\npublic void run () {\n  try {\n    while (true) { \n      // do stuff\n    }\n  }catch (InterruptedException e) {\n    LOGGER.log(Level.WARN, \"Interrupted!\", e);\n    // clean up state...\n    Thread.currentThread().interrupt();\n  }\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/391.html\">MITRE, CWE-391</a> - Unchecked Error Condition\n</li></ul>",
      "mdDesc": "<p><code>InterruptedExceptions</code> should never be ignored in the code, and simply logging the exception counts in this case as \"ignoring\". Instead, <code>InterruptedExceptions</code> should either be rethrown - immediately or after cleaning up the method's state - or the method should be reinterrupted. Any other course of action risks delaying thread shutdown and loses the information that the thread was interrupted - probably without finishing its task.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void run () {\n  try {\n    while (true) { \n      // do stuff\n    }\n  }catch (InterruptedException e) { // Noncompliant; logging is not enough\n    LOGGER.log(Level.WARN, \"Interrupted!\", e);\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic void run () throws InterruptedException{\n  try {\n    while (true) { \n      // do stuff\n    }\n  }catch (InterruptedException e) {\n    LOGGER.log(Level.WARN, \"Interrupted!\", e);\n    // clean up state...\n    throw e;\n  }\n}\n</pre>\n<p>or</p>\n<pre>\npublic void run () {\n  try {\n    while (true) { \n      // do stuff\n    }\n  }catch (InterruptedException e) {\n    LOGGER.log(Level.WARN, \"Interrupted!\", e);\n    // clean up state...\n    Thread.currentThread().interrupt();\n  }\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/391.html\">MITRE, CWE-391</a> - Unchecked Error Condition\n</li></ul>",
      "severity": "CRITICAL",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "cwe",
        "multi-threading"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "15min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "15min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "15min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "15min",
      "remFnOverloaded": false,
      "type": "BUG"
    },
    {
      "key": "squid:S1175",
      "repo": "squid",
      "name": "The signature of \"finalize()\" should match that of \"Object.finalize()\"",
      "createdAt": "2013-08-30T17:20:57+0200",
      "htmlDesc": "<p><code>Object.finalize()</code> is called by the Garbage Collector sometime after the object becomes unreferenced.</p>\n<p>Overloading this method is misleading:</p>\n<ul>\n<li> The overload will not be called by the Garbage Collector.\n</li><li> Users are not expected to call <code>Object.finalize()</code> and will get confused.\n</li></ul>\n<p>Another name should be picked for the method.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int finalize(int someParameter) {        // Noncompliant\n  /* ... */\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic int someBetterName(int someParameter) {  // Compliant\n  /* ... */\n}\n</pre>",
      "mdDesc": "<p><code>Object.finalize()</code> is called by the Garbage Collector sometime after the object becomes unreferenced.</p>\n<p>Overloading this method is misleading:</p>\n<ul>\n<li> The overload will not be called by the Garbage Collector.\n</li><li> Users are not expected to call <code>Object.finalize()</code> and will get confused.\n</li></ul>\n<p>Another name should be picked for the method.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int finalize(int someParameter) {        // Noncompliant\n  /* ... */\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic int someBetterName(int someParameter) {  // Compliant\n  /* ... */\n}\n</pre>",
      "severity": "MAJOR",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "pitfall"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "10min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "10min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "10min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "10min",
      "remFnOverloaded": false,
      "type": "CODE_SMELL"
    },
    {
      "key": "squid:S1174",
      "repo": "squid",
      "name": "\"Object.finalize()\" should remain protected (versus public) when overriding",
      "createdAt": "2013-08-30T17:20:57+0200",
      "htmlDesc": "<p>The contract of the <code>Object.finalize()</code> method is clear: only the Garbage Collector is supposed to call this method.</p>\n<p>Making this method public is misleading, because it implies that any caller can use it.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  @Override\n  public void finalize() {    // Noncompliant\n    /* ... */\n  }\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/583.html\">MITRE, CWE-583</a> - finalize() Method Declared Public\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/H4cbAQ\">CERT, MET12-J.</a> - Do not use finalizers\n</li></ul>",
      "mdDesc": "<p>The contract of the <code>Object.finalize()</code> method is clear: only the Garbage Collector is supposed to call this method.</p>\n<p>Making this method public is misleading, because it implies that any caller can use it.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  @Override\n  public void finalize() {    // Noncompliant\n    /* ... */\n  }\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/583.html\">MITRE, CWE-583</a> - finalize() Method Declared Public\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/H4cbAQ\">CERT, MET12-J.</a> - Do not use finalizers\n</li></ul>",
      "severity": "MAJOR",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "cert",
        "cwe"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "10min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "10min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "10min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "10min",
      "remFnOverloaded": false,
      "type": "CODE_SMELL"
    },
    {
      "key": "squid:S1858",
      "repo": "squid",
      "name": "\"toString()\" should never be called on a String object",
      "createdAt": "2015-05-20T05:01:40+0200",
      "htmlDesc": "<p>Invoking a method designed to return a string representation of an object which is already a string is a waste of keystrokes. This redundant construction may be optimized by the compiler, but will be confusing in the meantime.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nString message = \"hello world\";\nSystem.out.println(message.toString()); // Noncompliant;\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nString message = \"hello world\";\nSystem.out.println(message);\n</pre>",
      "mdDesc": "<p>Invoking a method designed to return a string representation of an object which is already a string is a waste of keystrokes. This redundant construction may be optimized by the compiler, but will be confusing in the meantime.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nString message = \"hello world\";\nSystem.out.println(message.toString()); // Noncompliant;\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nString message = \"hello world\";\nSystem.out.println(message);\n</pre>",
      "severity": "MINOR",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "clumsy",
        "finding"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "2min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "2min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "2min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "2min",
      "remFnOverloaded": false,
      "type": "CODE_SMELL"
    },
    {
      "key": "squid:S1854",
      "repo": "squid",
      "name": "Dead stores should be removed",
      "createdAt": "2015-10-08T07:53:21+0200",
      "htmlDesc": "<p>A dead store happens when a local variable is assigned a value, including <code>null</code>, that is not read by any subsequent instruction. Calculating or retrieving a value only to then overwrite it or throw it away, could indicate a serious error in the code. Even if it's not an error, it is at best a waste of resources. </p>\n<p>Even assigning <code>null</code> to a variable is a dead store if the variable is not subsequently used. Assigning null as a hint to the garbage collector used to be common practice, but is no longer needed and such code should be eliminated.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void pow(int a, int b) {\n  if(b == 0) {\n    return 0;\n  }\n  int x = a;\n  for(int i= 1, i &lt; b, i++) {\n    x = x * a;  //Dead store because the last return statement should return x instead of returning a\n  }\n  return a;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic void pow(int a, int b) {\n  if(b == 0) {\n    return 0;\n  }\n  int x = a;\n  for(int i= 1, i &lt; b, i++) {\n    x = x * a; \n  }\n  return x;\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/563.html\">MITRE, CWE-563</a> - Assignment to Variable without Use ('Unused Variable')\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/QYA5\">CERT, MSC13-C.</a> - Detect and remove unused values\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/S4IyAQ\">CERT, MSC13-CPP.</a> - Detect and remove unused values\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/uQCSBg\">CERT, MSC56-J.</a> - Detect and remove superfluous code and values\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect\n</li></ul>",
      "mdDesc": "<p>A dead store happens when a local variable is assigned a value, including <code>null</code>, that is not read by any subsequent instruction. Calculating or retrieving a value only to then overwrite it or throw it away, could indicate a serious error in the code. Even if it's not an error, it is at best a waste of resources. </p>\n<p>Even assigning <code>null</code> to a variable is a dead store if the variable is not subsequently used. Assigning null as a hint to the garbage collector used to be common practice, but is no longer needed and such code should be eliminated.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void pow(int a, int b) {\n  if(b == 0) {\n    return 0;\n  }\n  int x = a;\n  for(int i= 1, i &lt; b, i++) {\n    x = x * a;  //Dead store because the last return statement should return x instead of returning a\n  }\n  return a;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic void pow(int a, int b) {\n  if(b == 0) {\n    return 0;\n  }\n  int x = a;\n  for(int i= 1, i &lt; b, i++) {\n    x = x * a; \n  }\n  return x;\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/563.html\">MITRE, CWE-563</a> - Assignment to Variable without Use ('Unused Variable')\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/QYA5\">CERT, MSC13-C.</a> - Detect and remove unused values\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/S4IyAQ\">CERT, MSC13-CPP.</a> - Detect and remove unused values\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/uQCSBg\">CERT, MSC56-J.</a> - Detect and remove superfluous code and values\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect\n</li></ul>",
      "severity": "MAJOR",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "cert",
        "cwe",
        "suspicious",
        "unused"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "15min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "15min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "15min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "15min",
      "remFnOverloaded": false,
      "type": "CODE_SMELL"
    },
    {
      "key": "squid:S1612",
      "repo": "squid",
      "name": "Lambdas should be replaced with method references",
      "createdAt": "2014-08-22T09:22:55+0200",
      "htmlDesc": "<p>Method/constructor references are more compact and readable than using lambdas, and are therefore preferred.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n  List&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();\n  list.add(0);\n  list.add(1);\n  list.add(2);\n\n  list.forEach(n -&gt; { System.out.println(n); });\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n  List&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();\n  list.add(0);\n  list.add(1);\n  list.add(2);\n\n  list.forEach(System.out::println);\n</pre>",
      "mdDesc": "<p>Method/constructor references are more compact and readable than using lambdas, and are therefore preferred.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n  List&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();\n  list.add(0);\n  list.add(1);\n  list.add(2);\n\n  list.forEach(n -&gt; { System.out.println(n); });\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n  List&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();\n  list.add(0);\n  list.add(1);\n  list.add(2);\n\n  list.forEach(System.out::println);\n</pre>",
      "severity": "MINOR",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "java8"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "2min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "2min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "2min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "2min",
      "remFnOverloaded": false,
      "type": "CODE_SMELL"
    },
    {
      "key": "squid:S1611",
      "repo": "squid",
      "name": "Parentheses should be removed from a single lambda input parameter when its type is inferred",
      "createdAt": "2014-03-07T09:24:00+0100",
      "htmlDesc": "<p>There are two possible syntaxes for a lambda having only one input parameter with an inferred type: with and without parentheses around that single parameter. The simpler syntax, without parentheses, is more compact and readable than the one with parentheses, and is therefore preferred.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n(x) -&gt; x * 2\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nx -&gt; x * 2\n</pre>",
      "mdDesc": "<p>There are two possible syntaxes for a lambda having only one input parameter with an inferred type: with and without parentheses around that single parameter. The simpler syntax, without parentheses, is more compact and readable than the one with parentheses, and is therefore preferred.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n(x) -&gt; x * 2\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nx -&gt; x * 2\n</pre>",
      "severity": "MINOR",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "java8"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "2min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "2min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "2min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "2min",
      "remFnOverloaded": false,
      "type": "CODE_SMELL"
    },
    {
      "key": "squid:S1609",
      "repo": "squid",
      "name": "@FunctionalInterface annotation should be used to flag Single Abstract Method interfaces",
      "createdAt": "2014-06-27T22:32:54+0200",
      "htmlDesc": "<p>A Single Abstract Method (SAM) interface is a Java interface containing only one method. The Java API is full of SAM interfaces, such as <code>java.lang.Runnable</code>, <code>java.awt.event.ActionListener</code>, <code>java.util.Comparator</code> and <code>java.util.concurrent.Callable</code>. SAM interfaces have a special place in Java 8 because they can be implemented using Lambda expressions or Method references. </p>\n<p>Using <code>@FunctionalInterface</code> forces a compile break when an additional, non-overriding abstract method is added to a SAM, which would break the use of Lambda implementations.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface Changeable&lt;T&gt; {\n  public void change(T o);\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n@FunctionalInterface\npublic interface Changeable&lt;T&gt; {\n  public void change(T o);\n}\n</pre>",
      "mdDesc": "<p>A Single Abstract Method (SAM) interface is a Java interface containing only one method. The Java API is full of SAM interfaces, such as <code>java.lang.Runnable</code>, <code>java.awt.event.ActionListener</code>, <code>java.util.Comparator</code> and <code>java.util.concurrent.Callable</code>. SAM interfaces have a special place in Java 8 because they can be implemented using Lambda expressions or Method references. </p>\n<p>Using <code>@FunctionalInterface</code> forces a compile break when an additional, non-overriding abstract method is added to a SAM, which would break the use of Lambda implementations.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface Changeable&lt;T&gt; {\n  public void change(T o);\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n@FunctionalInterface\npublic interface Changeable&lt;T&gt; {\n  public void change(T o);\n}\n</pre>",
      "severity": "MAJOR",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "java8"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "2min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "2min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "2min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "2min",
      "remFnOverloaded": false,
      "type": "CODE_SMELL"
    },
    {
      "key": "squid:S2140",
      "repo": "squid",
      "name": "Methods of \"Random\" that return floating point values should not be used in random integer generation",
      "createdAt": "2016-04-08T10:44:55+0200",
      "htmlDesc": "<p>There is no need to multiply the output of <code>Random</code>'s <code>nextDouble</code> method to get a random integer. Use the <code>nextInt</code> method instead.</p>\n<p>This rule raises an issue when the return value of any of <code>Random</code>'s methods that return a floating point value is converted to an integer.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nRandom r = new Random();\nint rand = (int)r.nextDouble() * 50;  // Noncompliant way to get a pseudo-random value between 0 and 50\nint rand2 = (int)r.nextFloat(); // Noncompliant; will always be 0;\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nRandom r = new Random();\nint rand = r.nextInt(50);  // returns pseudo-random value between 0 and 50\n</pre>",
      "mdDesc": "<p>There is no need to multiply the output of <code>Random</code>'s <code>nextDouble</code> method to get a random integer. Use the <code>nextInt</code> method instead.</p>\n<p>This rule raises an issue when the return value of any of <code>Random</code>'s methods that return a floating point value is converted to an integer.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nRandom r = new Random();\nint rand = (int)r.nextDouble() * 50;  // Noncompliant way to get a pseudo-random value between 0 and 50\nint rand2 = (int)r.nextFloat(); // Noncompliant; will always be 0;\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nRandom r = new Random();\nint rand = r.nextInt(50);  // returns pseudo-random value between 0 and 50\n</pre>",
      "severity": "MAJOR",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "clumsy"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "5min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "5min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "5min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "5min",
      "remFnOverloaded": false,
      "type": "CODE_SMELL"
    },
    {
      "key": "squid:S1172",
      "repo": "squid",
      "name": "Unused method parameters should be removed",
      "createdAt": "2014-06-27T22:32:54+0200",
      "htmlDesc": "<p>Unused parameters are misleading. Whatever the value passed to such parameters is, the behavior will be the same.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid doSomething(int a, int b) {     // \"b\" is unused\n  compute(a);\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvoid doSomething(int a) { \n  compute(a);\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>Override and implementation methods are excluded, as are parameters annotated with <code>@Observes</code>, and methods that are intended to be overridden.</p>\n<pre>\n@override\nvoid doSomething(int a, int b) {     // no issue reported on b\n  compute(a);\n}\n\npublic void foo(String s) {\n  // designed to be extended but noop in standard case\n}\n\nprotected void bar(String s) {\n  //open-closed principle\n}\n\npublic void qix(String s) {\n  throw new UnsupportedOperationException(\"This method should be implemented in subclasses\");\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> MISRA C++:2008, 0-1-11 - There shall be no unused parameters (named or unnamed) in nonvirtual functions.\n</li><li> MISRA C:2012, 2.7 - There should be no unused parameters in functions\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect\n</li></ul>",
      "mdDesc": "<p>Unused parameters are misleading. Whatever the value passed to such parameters is, the behavior will be the same.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid doSomething(int a, int b) {     // \"b\" is unused\n  compute(a);\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvoid doSomething(int a) { \n  compute(a);\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>Override and implementation methods are excluded, as are parameters annotated with <code>@Observes</code>, and methods that are intended to be overridden.</p>\n<pre>\n@override\nvoid doSomething(int a, int b) {     // no issue reported on b\n  compute(a);\n}\n\npublic void foo(String s) {\n  // designed to be extended but noop in standard case\n}\n\nprotected void bar(String s) {\n  //open-closed principle\n}\n\npublic void qix(String s) {\n  throw new UnsupportedOperationException(\"This method should be implemented in subclasses\");\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> MISRA C++:2008, 0-1-11 - There shall be no unused parameters (named or unnamed) in nonvirtual functions.\n</li><li> MISRA C:2012, 2.7 - There should be no unused parameters in functions\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect\n</li></ul>",
      "severity": "MAJOR",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "cert",
        "misra",
        "unused"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "5min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "5min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "5min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "5min",
      "remFnOverloaded": false,
      "type": "CODE_SMELL"
    },
    {
      "key": "squid:S1171",
      "repo": "squid",
      "name": "Only static class initializers should be used",
      "createdAt": "2013-08-30T17:20:57+0200",
      "htmlDesc": "<p>Non-static initializers are rarely used, and can be confusing for most developers.</p>\n<p>When possible, they should be refactored into standard constructors or field initializers.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass {\n  private static final Map&lt;String, String&gt; MY_MAP = new HashMap&lt;String, String&gt;() {\n\n    // Noncompliant - HashMap should be extended only to add behavior, not for initialization\n    {\n      put(\"a\", \"b\");\n    }\n\n  };\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n  private static final Map&lt;String, String&gt; MY_MAP = new HashMap&lt;String, String&gt;();\n\n  static {\n    MY_MAP.put(\"a\", \"b\");\n  }\n}\n</pre>\n<p>or using Guava:</p>\n<pre>\nclass MyClass {\n  // Compliant\n  private static final Map&lt;String, String&gt; MY_MAP = ImmutableMap.of(\"a\", \"b\");\n}\n</pre>",
      "mdDesc": "<p>Non-static initializers are rarely used, and can be confusing for most developers.</p>\n<p>When possible, they should be refactored into standard constructors or field initializers.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass {\n  private static final Map&lt;String, String&gt; MY_MAP = new HashMap&lt;String, String&gt;() {\n\n    // Noncompliant - HashMap should be extended only to add behavior, not for initialization\n    {\n      put(\"a\", \"b\");\n    }\n\n  };\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n  private static final Map&lt;String, String&gt; MY_MAP = new HashMap&lt;String, String&gt;();\n\n  static {\n    MY_MAP.put(\"a\", \"b\");\n  }\n}\n</pre>\n<p>or using Guava:</p>\n<pre>\nclass MyClass {\n  // Compliant\n  private static final Map&lt;String, String&gt; MY_MAP = ImmutableMap.of(\"a\", \"b\");\n}\n</pre>",
      "severity": "MAJOR",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "pitfall"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "30min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "30min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "30min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "30min",
      "remFnOverloaded": false,
      "type": "CODE_SMELL"
    },
    {
      "key": "squid:S1170",
      "repo": "squid",
      "name": "Public constants and fields initialized at declaration should be \"static final\" rather than merely \"final\"",
      "createdAt": "2013-08-30T17:20:57+0200",
      "htmlDesc": "<p>Making a <code>public</code> constant just <code>final</code> as opposed to <code>static final</code> leads to duplicating its value for every instance of the class, uselessly increasing the amount of memory required to execute the application.</p>\n<p>Further, when a non-<code>public</code>, <code>final</code>  field isn't also <code>static</code>, it implies that different instances can have different values. However, initializing a non-<code>static final</code> field in its declaration forces every instance to have the same value. So such fields should either be made <code>static</code> or initialized in the constructor.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Myclass {\n  public final int THRESHOLD = 3;   \n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Myclass {\n  public static final int THRESHOLD = 3;    // Compliant\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>No issues are reported on final fields of inner classes whose type is not a primitive or a String. Indeed according to the Java specification:</p>\n<blockquote>\n<p>An inner class is a nested class that is not explicitly or implicitly declared static. Inner classes may not declare static initializers (§8.7) or member interfaces. Inner classes may not declare static members, unless they are compile-time constant fields (§15.28).</p>\n</blockquote>",
      "mdDesc": "<p>Making a <code>public</code> constant just <code>final</code> as opposed to <code>static final</code> leads to duplicating its value for every instance of the class, uselessly increasing the amount of memory required to execute the application.</p>\n<p>Further, when a non-<code>public</code>, <code>final</code>  field isn't also <code>static</code>, it implies that different instances can have different values. However, initializing a non-<code>static final</code> field in its declaration forces every instance to have the same value. So such fields should either be made <code>static</code> or initialized in the constructor.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Myclass {\n  public final int THRESHOLD = 3;   \n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Myclass {\n  public static final int THRESHOLD = 3;    // Compliant\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>No issues are reported on final fields of inner classes whose type is not a primitive or a String. Indeed according to the Java specification:</p>\n<blockquote>\n<p>An inner class is a nested class that is not explicitly or implicitly declared static. Inner classes may not declare static initializers (§8.7) or member interfaces. Inner classes may not declare static members, unless they are compile-time constant fields (§15.28).</p>\n</blockquote>",
      "severity": "MINOR",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "convention"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "2min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "2min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "2min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "2min",
      "remFnOverloaded": false,
      "type": "CODE_SMELL"
    },
    {
      "key": "squid:S2159",
      "repo": "squid",
      "name": "Silly equality checks should not be made",
      "createdAt": "2015-05-20T05:01:39+0200",
      "htmlDesc": "<p>Comparisons of dissimilar types will always return false. The comparison and all its dependent code can simply be removed. This includes:</p>\n<ul>\n<li> comparing an object with null\n</li><li> comparing an object with an unrelated primitive (E.G. a string with an int)\n</li><li> comparing unrelated classes\n</li><li> comparing an unrelated <code>class</code> and <code>interface</code>\n</li><li> comparing unrelated <code>interface</code> types\n</li><li> comparing an array to a non-array\n</li><li> comparing two arrays\n</li></ul>\n<p>Specifically in the case of arrays, since arrays don't override <code>Object.equals()</code>, calling <code>equals</code> on two arrays is the same as comparing their addresses. This means that <code>array1.equals(array2)</code> is equivalent to <code>array1==array2</code>.</p>\n<p>However, some developers might expect <code>Array.equals(Object obj)</code> to do more than a simple memory address comparison, comparing for instance the size and content of the two arrays. Instead, the <code>==</code> operator or <code>Arrays.equals(array1, array2)</code> should always be used with arrays.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\ninterface KitchenTool { ... };\ninterface Plant {...}\n\npublic class Spatula implements KitchenTool { ... }\npublic class Tree implements Plant { ...}\n//...\n\nSpatula spatula = new Spatula();\nKitchenTool tool = spatula;\nKitchenTool [] tools = {tool};\n\nTree tree = new Tree();\nPlant plant = tree;\nTree [] trees = {tree};\n\n\nif (spatula.equals(tree)) { // Noncompliant; unrelated classes\n  // ...\n}\nelse if (spatula.equals(plant)) { // Noncompliant; unrelated class and interface\n  // ...\n}\nelse if (tool.equals(plant)) { // Noncompliant; unrelated interfaces\n  // ...\n}\nelse if (tool.equals(tools)) { // Noncompliant; array &amp; non-array\n  // ...\n}\nelse if (trees.equals(tools)) {  // Noncompliant; incompatible arrays\n  // ...\n}\nelse if (tree.equals(null)) {  // Noncompliant\n  // ...\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"https://www.securecoding.cert.org/confluence/x/IQAlAg\">CERT, EXP02-J.</a> - Do not use the Object.equals() method to compare two arrays\n</li></ul>",
      "mdDesc": "<p>Comparisons of dissimilar types will always return false. The comparison and all its dependent code can simply be removed. This includes:</p>\n<ul>\n<li> comparing an object with null\n</li><li> comparing an object with an unrelated primitive (E.G. a string with an int)\n</li><li> comparing unrelated classes\n</li><li> comparing an unrelated <code>class</code> and <code>interface</code>\n</li><li> comparing unrelated <code>interface</code> types\n</li><li> comparing an array to a non-array\n</li><li> comparing two arrays\n</li></ul>\n<p>Specifically in the case of arrays, since arrays don't override <code>Object.equals()</code>, calling <code>equals</code> on two arrays is the same as comparing their addresses. This means that <code>array1.equals(array2)</code> is equivalent to <code>array1==array2</code>.</p>\n<p>However, some developers might expect <code>Array.equals(Object obj)</code> to do more than a simple memory address comparison, comparing for instance the size and content of the two arrays. Instead, the <code>==</code> operator or <code>Arrays.equals(array1, array2)</code> should always be used with arrays.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\ninterface KitchenTool { ... };\ninterface Plant {...}\n\npublic class Spatula implements KitchenTool { ... }\npublic class Tree implements Plant { ...}\n//...\n\nSpatula spatula = new Spatula();\nKitchenTool tool = spatula;\nKitchenTool [] tools = {tool};\n\nTree tree = new Tree();\nPlant plant = tree;\nTree [] trees = {tree};\n\n\nif (spatula.equals(tree)) { // Noncompliant; unrelated classes\n  // ...\n}\nelse if (spatula.equals(plant)) { // Noncompliant; unrelated class and interface\n  // ...\n}\nelse if (tool.equals(plant)) { // Noncompliant; unrelated interfaces\n  // ...\n}\nelse if (tool.equals(tools)) { // Noncompliant; array &amp; non-array\n  // ...\n}\nelse if (trees.equals(tools)) {  // Noncompliant; incompatible arrays\n  // ...\n}\nelse if (tree.equals(null)) {  // Noncompliant\n  // ...\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"https://www.securecoding.cert.org/confluence/x/IQAlAg\">CERT, EXP02-J.</a> - Do not use the Object.equals() method to compare two arrays\n</li></ul>",
      "severity": "CRITICAL",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "cert",
        "unused"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "15min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "15min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "15min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "15min",
      "remFnOverloaded": false,
      "type": "BUG"
    },
    {
      "key": "squid:S1862",
      "repo": "squid",
      "name": "Related \"if/else if\" statements should not have the same condition",
      "createdAt": "2014-08-22T09:22:55+0200",
      "htmlDesc": "<p>A chain of <code>if</code>/<code>else if</code> statements is evaluated from top to bottom. At most, only one branch will be executed: the first one with a condition that evaluates to <code>true</code>. </p>\n<p>Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it's simply dead code and at worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior. </p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (param == 1)\n  openWindow();\nelse if (param == 2)\n  closeWindow();\nelse if (param == 1)  // Noncompliant\n  moveWindowToTheBackground();\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (param == 1)\n  openWindow();\nelse if (param == 2)\n  closeWindow();\nelse if (param == 3)\n  moveWindowToTheBackground();\n}\n\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect\n</li></ul>",
      "mdDesc": "<p>A chain of <code>if</code>/<code>else if</code> statements is evaluated from top to bottom. At most, only one branch will be executed: the first one with a condition that evaluates to <code>true</code>. </p>\n<p>Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it's simply dead code and at worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior. </p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (param == 1)\n  openWindow();\nelse if (param == 2)\n  closeWindow();\nelse if (param == 1)  // Noncompliant\n  moveWindowToTheBackground();\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (param == 1)\n  openWindow();\nelse if (param == 2)\n  closeWindow();\nelse if (param == 3)\n  moveWindowToTheBackground();\n}\n\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect\n</li></ul>",
      "severity": "CRITICAL",
      "status": "READY",
      "isTemplate": false,
      "tags": [],
      "sysTags": [
        "cert",
        "pitfall",
        "unused"
      ],
      "lang": "java",
      "langName": "Java",
      "params": [],
      "defaultDebtRemFnType": "CONSTANT_ISSUE",
      "defaultDebtRemFnOffset": "10min",
      "debtOverloaded": false,
      "debtRemFnType": "CONSTANT_ISSUE",
      "debtRemFnOffset": "10min",
      "defaultRemFnType": "CONSTANT_ISSUE",
      "defaultRemFnBaseEffort": "10min",
      "remFnType": "CONSTANT_ISSUE",
      "remFnBaseEffort": "10min",
      "remFnOverloaded": false,
      "type": "BUG"
    }
  ]
}